# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU

# Run progress: 0.00% complete, ETA 00:18:00
# Fork: 1 of 3
# Warmup Iteration   1: 6.668 ns/op
# Warmup Iteration   2: 6.930 ns/op
# Warmup Iteration   3: 6.244 ns/op
# Warmup Iteration   4: 6.206 ns/op
# Warmup Iteration   5: 6.220 ns/op
Iteration   1: 6.251 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.244 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.257 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.260 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.248 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 6.212 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 6.251 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 6.216 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 6.216 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 6.266 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 4.17% complete, ETA 00:20:18
# Fork: 2 of 3
# Warmup Iteration   1: 7.810 ns/op
# Warmup Iteration   2: 7.182 ns/op
# Warmup Iteration   3: 7.283 ns/op
# Warmup Iteration   4: 7.299 ns/op
# Warmup Iteration   5: 7.361 ns/op
Iteration   1: 7.308 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 7.294 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 7.401 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 7.340 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 7.328 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 7.353 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 7.329 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 7.354 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 7.387 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 7.436 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 8.33% complete, ETA 00:19:24
# Fork: 3 of 3
# Warmup Iteration   1: 6.724 ns/op
# Warmup Iteration   2: 6.979 ns/op
# Warmup Iteration   3: 6.199 ns/op
# Warmup Iteration   4: 6.211 ns/op
# Warmup Iteration   5: 6.266 ns/op
Iteration   1: 6.227 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.215 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.233 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.210 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.163 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 6.222 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 6.155 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 6.142 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 6.162 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 6.139 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU":
  6.594 ±(99.9%) 0.366 ns/op [Average]
  (min, avg, max) = (6.139, 6.594, 7.436), stdev = 0.547
  CI (99.9%): [6.228, 6.960] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement

# Run progress: 12.50% complete, ETA 00:18:31
# Fork: 1 of 3
# Warmup Iteration   1: 6.163 ns/op
# Warmup Iteration   2: 6.003 ns/op
# Warmup Iteration   3: 5.135 ns/op
# Warmup Iteration   4: 5.211 ns/op
# Warmup Iteration   5: 5.158 ns/op
Iteration   1: 5.131 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.148 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.143 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.120 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.152 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 5.123 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 5.138 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 5.141 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 5.128 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 5.126 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 16.67% complete, ETA 00:17:38
# Fork: 2 of 3
# Warmup Iteration   1: 6.177 ns/op
# Warmup Iteration   2: 6.020 ns/op
# Warmup Iteration   3: 5.126 ns/op
# Warmup Iteration   4: 5.147 ns/op
# Warmup Iteration   5: 5.122 ns/op
Iteration   1: 5.129 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.136 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.135 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.123 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.142 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 5.116 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 5.128 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 5.140 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 5.128 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 5.125 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 20.83% complete, ETA 00:16:45
# Fork: 3 of 3
# Warmup Iteration   1: 6.138 ns/op
# Warmup Iteration   2: 6.048 ns/op
# Warmup Iteration   3: 5.215 ns/op
# Warmup Iteration   4: 5.178 ns/op
# Warmup Iteration   5: 5.184 ns/op
Iteration   1: 5.211 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.128 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.134 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.143 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.144 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 5.130 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 5.163 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 5.122 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 5.119 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 5.164 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement":
  5.137 ±(99.9%) 0.012 ns/op [Average]
  (min, avg, max) = (5.116, 5.137, 5.211), stdev = 0.018
  CI (99.9%): [5.125, 5.149] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU

# Run progress: 25.00% complete, ETA 00:15:52
# Fork: 1 of 3
# Warmup Iteration   1: 9.741 ns/op
# Warmup Iteration   2: 9.758 ns/op
# Warmup Iteration   3: 9.012 ns/op
# Warmup Iteration   4: 8.994 ns/op
# Warmup Iteration   5: 8.987 ns/op
Iteration   1: 8.984 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.973 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.079 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.019 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.997 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 8.994 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 8.979 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 8.973 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 8.989 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 9.155 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 29.17% complete, ETA 00:14:59
# Fork: 2 of 3
# Warmup Iteration   1: 9.653 ns/op
# Warmup Iteration   2: 9.688 ns/op
# Warmup Iteration   3: 9.001 ns/op
# Warmup Iteration   4: 8.981 ns/op
# Warmup Iteration   5: 9.011 ns/op
Iteration   1: 9.012 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.275 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.007 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.989 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.029 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 9.013 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 8.983 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 8.984 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 9.014 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 8.982 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 33.33% complete, ETA 00:14:06
# Fork: 3 of 3
# Warmup Iteration   1: 9.570 ns/op
# Warmup Iteration   2: 9.780 ns/op
# Warmup Iteration   3: 8.963 ns/op
# Warmup Iteration   4: 8.945 ns/op
# Warmup Iteration   5: 8.991 ns/op
Iteration   1: 8.990 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.967 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.948 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.960 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.940 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 8.955 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 8.957 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 8.964 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 8.894 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 8.892 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU":
  8.997 ±(99.9%) 0.048 ns/op [Average]
  (min, avg, max) = (8.892, 8.997, 9.275), stdev = 0.071
  CI (99.9%): [8.949, 9.044] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement

# Run progress: 37.50% complete, ETA 00:13:13
# Fork: 1 of 3
# Warmup Iteration   1: 9.219 ns/op
# Warmup Iteration   2: 9.217 ns/op
# Warmup Iteration   3: 8.581 ns/op
# Warmup Iteration   4: 8.662 ns/op
# Warmup Iteration   5: 8.545 ns/op
Iteration   1: 8.539 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.627 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.535 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.568 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.580 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 8.536 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 8.552 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 8.597 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 8.575 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 9.092 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 41.67% complete, ETA 00:12:20
# Fork: 2 of 3
# Warmup Iteration   1: 9.200 ns/op
# Warmup Iteration   2: 9.651 ns/op
# Warmup Iteration   3: 8.565 ns/op
# Warmup Iteration   4: 8.566 ns/op
# Warmup Iteration   5: 8.550 ns/op
Iteration   1: 8.527 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.549 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.534 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.580 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.582 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 8.551 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 8.956 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 8.529 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 8.557 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 8.572 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 45.83% complete, ETA 00:11:27
# Fork: 3 of 3
# Warmup Iteration   1: 9.140 ns/op
# Warmup Iteration   2: 9.191 ns/op
# Warmup Iteration   3: 8.553 ns/op
# Warmup Iteration   4: 8.537 ns/op
# Warmup Iteration   5: 8.529 ns/op
Iteration   1: 8.577 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.536 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.528 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.561 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.546 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 8.535 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 8.584 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 8.533 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 8.547 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 8.577 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement":
  8.589 ±(99.9%) 0.082 ns/op [Average]
  (min, avg, max) = (8.527, 8.589, 9.092), stdev = 0.122
  CI (99.9%): [8.507, 8.670] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU

# Run progress: 50.00% complete, ETA 00:10:34
# Fork: 1 of 3
# Warmup Iteration   1: 11.131 ns/op
# Warmup Iteration   2: 11.828 ns/op
# Warmup Iteration   3: 11.417 ns/op
# Warmup Iteration   4: 11.431 ns/op
# Warmup Iteration   5: 11.428 ns/op
Iteration   1: 11.411 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11.410 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11.450 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11.439 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11.449 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 11.567 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 11.557 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 11.334 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 11.446 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 11.336 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 54.17% complete, ETA 00:09:41
# Fork: 2 of 3
# Warmup Iteration   1: 11.084 ns/op
# Warmup Iteration   2: 12.188 ns/op
# Warmup Iteration   3: 11.625 ns/op
# Warmup Iteration   4: 11.555 ns/op
# Warmup Iteration   5: 11.520 ns/op
Iteration   1: 11.507 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11.497 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11.562 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11.552 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11.484 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 11.546 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 11.514 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 11.550 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 11.650 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 11.567 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 58.33% complete, ETA 00:08:49
# Fork: 3 of 3
# Warmup Iteration   1: 11.107 ns/op
# Warmup Iteration   2: 11.308 ns/op
# Warmup Iteration   3: 11.345 ns/op
# Warmup Iteration   4: 11.403 ns/op
# Warmup Iteration   5: 11.356 ns/op
Iteration   1: 11.357 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11.490 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11.382 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11.381 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11.439 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 11.359 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 11.352 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 11.400 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 11.370 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 11.373 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU":
  11.458 ±(99.9%) 0.057 ns/op [Average]
  (min, avg, max) = (11.334, 11.458, 11.650), stdev = 0.085
  CI (99.9%): [11.401, 11.515] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement

# Run progress: 62.50% complete, ETA 00:07:56
# Fork: 1 of 3
# Warmup Iteration   1: 11.032 ns/op
# Warmup Iteration   2: 18.654 ns/op
# Warmup Iteration   3: 14.933 ns/op
# Warmup Iteration   4: 15.066 ns/op
# Warmup Iteration   5: 15.321 ns/op
Iteration   1: 15.675 ns/op
                 ·gc.alloc.rate:                   1251.743 MB/sec
                 ·gc.alloc.rate.norm:              24.010 B/op
                 ·gc.churn.PS_Eden_Space:          1242.551 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.834 B/op
                 ·gc.churn.PS_Survivor_Space:      0.045 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         30.000 ms

Iteration   2: 15.447 ns/op
                 ·gc.alloc.rate:                   1270.146 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1278.646 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.170 B/op
                 ·gc.churn.PS_Survivor_Space:      0.036 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         29.000 ms

Iteration   3: 15.353 ns/op
                 ·gc.alloc.rate:                   1277.991 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1276.344 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.978 B/op
                 ·gc.churn.PS_Survivor_Space:      0.045 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         29.000 ms

Iteration   4: 15.295 ns/op
                 ·gc.alloc.rate:                   1282.878 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1286.334 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.074 B/op
                 ·gc.churn.PS_Survivor_Space:      0.071 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         29.000 ms

Iteration   5: 15.318 ns/op
                 ·gc.alloc.rate:                   1280.908 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1268.794 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.782 B/op
                 ·gc.churn.PS_Survivor_Space:      0.089 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         29.000 ms

Iteration   6: 15.685 ns/op
                 ·gc.alloc.rate:                   1250.948 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1253.929 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.066 B/op
                 ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         31.000 ms

Iteration   7: 15.622 ns/op
                 ·gc.alloc.rate:                   1256.088 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1255.988 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.007 B/op
                 ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         29.000 ms

Iteration   8: 15.766 ns/op
                 ·gc.alloc.rate:                   1244.565 MB/sec
                 ·gc.alloc.rate.norm:              24.010 B/op
                 ·gc.churn.PS_Eden_Space:          1247.779 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.072 B/op
                 ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         30.000 ms

Iteration   9: 15.593 ns/op
                 ·gc.alloc.rate:                   1258.335 MB/sec
                 ·gc.alloc.rate.norm:              24.010 B/op
                 ·gc.churn.PS_Eden_Space:          1270.966 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.251 B/op
                 ·gc.churn.PS_Survivor_Space:      0.045 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        80.000 counts
                 ·gc.time:                         31.000 ms

Iteration  10: 15.595 ns/op
                 ·gc.alloc.rate:                   1258.145 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1250.596 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.865 B/op
                 ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         29.000 ms


# Run progress: 66.67% complete, ETA 00:07:03
# Fork: 2 of 3
# Warmup Iteration   1: 11.082 ns/op
# Warmup Iteration   2: 18.664 ns/op
# Warmup Iteration   3: 14.936 ns/op
# Warmup Iteration   4: 15.082 ns/op
# Warmup Iteration   5: 15.551 ns/op
Iteration   1: 15.705 ns/op
                 ·gc.alloc.rate:                   1249.375 MB/sec
                 ·gc.alloc.rate.norm:              24.010 B/op
                 ·gc.churn.PS_Eden_Space:          1253.235 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.084 B/op
                 ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         30.000 ms

Iteration   2: 15.525 ns/op
                 ·gc.alloc.rate:                   1263.873 MB/sec
                 ·gc.alloc.rate.norm:              24.010 B/op
                 ·gc.churn.PS_Eden_Space:          1260.414 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.944 B/op
                 ·gc.churn.PS_Survivor_Space:      0.071 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         30.000 ms

Iteration   3: 15.298 ns/op
                 ·gc.alloc.rate:                   1282.484 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1284.342 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.044 B/op
                 ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         29.000 ms

Iteration   4: 15.347 ns/op
                 ·gc.alloc.rate:                   1278.554 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1272.605 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.897 B/op
                 ·gc.churn.PS_Survivor_Space:      0.089 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         29.000 ms

Iteration   5: 15.309 ns/op
                 ·gc.alloc.rate:                   1281.738 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1283.605 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.044 B/op
                 ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         30.000 ms

Iteration   6: 15.292 ns/op
                 ·gc.alloc.rate:                   1283.084 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1288.581 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.112 B/op
                 ·gc.churn.PS_Survivor_Space:      0.036 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         30.000 ms

Iteration   7: 15.836 ns/op
                 ·gc.alloc.rate:                   1239.060 MB/sec
                 ·gc.alloc.rate.norm:              24.010 B/op
                 ·gc.churn.PS_Eden_Space:          1237.583 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.981 B/op
                 ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        81.000 counts
                 ·gc.time:                         29.000 ms

Iteration   8: 15.923 ns/op
                 ·gc.alloc.rate:                   1232.257 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1234.719 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.057 B/op
                 ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         30.000 ms

Iteration   9: 16.075 ns/op
                 ·gc.alloc.rate:                   1220.651 MB/sec
                 ·gc.alloc.rate.norm:              24.010 B/op
                 ·gc.churn.PS_Eden_Space:          1221.330 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.023 B/op
                 ·gc.churn.PS_Survivor_Space:      0.045 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         30.000 ms

Iteration  10: 16.096 ns/op
                 ·gc.alloc.rate:                   1219.062 MB/sec
                 ·gc.alloc.rate.norm:              24.010 B/op
                 ·gc.churn.PS_Eden_Space:          1218.758 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.004 B/op
                 ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         29.000 ms


# Run progress: 70.83% complete, ETA 00:06:10
# Fork: 3 of 3
# Warmup Iteration   1: 10.979 ns/op
# Warmup Iteration   2: 18.631 ns/op
# Warmup Iteration   3: 15.054 ns/op
# Warmup Iteration   4: 15.164 ns/op
# Warmup Iteration   5: 15.481 ns/op
Iteration   1: 15.740 ns/op
                 ·gc.alloc.rate:                   1246.595 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1241.784 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.917 B/op
                 ·gc.churn.PS_Survivor_Space:      0.080 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        73.000 counts
                 ·gc.time:                         30.000 ms

Iteration   2: 15.626 ns/op
                 ·gc.alloc.rate:                   1255.690 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1256.979 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.034 B/op
                 ·gc.churn.PS_Survivor_Space:      0.045 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         30.000 ms

Iteration   3: 15.371 ns/op
                 ·gc.alloc.rate:                   1276.545 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1279.421 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.063 B/op
                 ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         30.000 ms

Iteration   4: 15.433 ns/op
                 ·gc.alloc.rate:                   1271.408 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1260.998 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.812 B/op
                 ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         28.000 ms

Iteration   5: 15.631 ns/op
                 ·gc.alloc.rate:                   1255.245 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1260.372 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.107 B/op
                 ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         30.000 ms

Iteration   6: 15.612 ns/op
                 ·gc.alloc.rate:                   1256.843 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1269.264 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.246 B/op
                 ·gc.churn.PS_Survivor_Space:      0.054 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         31.000 ms

Iteration   7: 15.637 ns/op
                 ·gc.alloc.rate:                   1254.875 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1247.513 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.868 B/op
                 ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         29.000 ms

Iteration   8: 15.646 ns/op
                 ·gc.alloc.rate:                   1254.141 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1250.167 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.933 B/op
                 ·gc.churn.PS_Survivor_Space:      0.054 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         30.000 ms

Iteration   9: 15.676 ns/op
                 ·gc.alloc.rate:                   1251.615 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1262.254 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.213 B/op
                 ·gc.churn.PS_Survivor_Space:      0.054 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         29.000 ms

Iteration  10: 15.605 ns/op
                 ·gc.alloc.rate:                   1257.357 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          1255.434 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.972 B/op
                 ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         30.000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement":
  15.591 ±(99.9%) 0.146 ns/op [Average]
  (min, avg, max) = (15.292, 15.591, 16.096), stdev = 0.219
  CI (99.9%): [15.445, 15.737] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate":
  1258.740 ±(99.9%) 11.729 MB/sec [Average]
  (min, avg, max) = (1219.062, 1258.740, 1283.084), stdev = 17.555
  CI (99.9%): [1247.011, 1270.469] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate.norm":
  24.009 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (24.009, 24.009, 24.010), stdev = 0.001
  CI (99.9%): [24.009, 24.010] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space":
  1259.043 ±(99.9%) 12.198 MB/sec [Average]
  (min, avg, max) = (1218.758, 1259.043, 1288.581), stdev = 18.257
  CI (99.9%): [1246.845, 1271.241] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space.norm":
  24.015 ±(99.9%) 0.081 B/op [Average]
  (min, avg, max) = (23.782, 24.015, 24.251), stdev = 0.121
  CI (99.9%): [23.935, 24.096] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space":
  0.043 ±(99.9%) 0.015 MB/sec [Average]
  (min, avg, max) = (0.018, 0.043, 0.089), stdev = 0.022
  CI (99.9%): [0.028, 0.057] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (≈ 10⁻³, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.count":
  2300.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (71.000, 76.667, 81.000), stdev = 2.123
  CI (99.9%): [2300.000, 2300.000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.time":
  889.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (28.000, 29.633, 31.000), stdev = 0.718
  CI (99.9%): [889.000, 889.000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU

# Run progress: 75.00% complete, ETA 00:05:17
# Fork: 1 of 3
# Warmup Iteration   1: 7.346 ns/op
# Warmup Iteration   2: 7.231 ns/op
# Warmup Iteration   3: 6.823 ns/op
# Warmup Iteration   4: 6.837 ns/op
# Warmup Iteration   5: 6.857 ns/op
Iteration   1: 6.822 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.821 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.877 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.833 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.830 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 6.906 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 6.822 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 6.828 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 6.869 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 6.822 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 79.17% complete, ETA 00:04:24
# Fork: 2 of 3
# Warmup Iteration   1: 7.414 ns/op
# Warmup Iteration   2: 7.300 ns/op
# Warmup Iteration   3: 6.904 ns/op
# Warmup Iteration   4: 6.894 ns/op
# Warmup Iteration   5: 6.924 ns/op
Iteration   1: 6.921 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.906 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.927 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.908 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.969 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 6.904 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 6.915 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 6.894 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 6.838 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 6.823 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 83.33% complete, ETA 00:03:31
# Fork: 3 of 3
# Warmup Iteration   1: 7.342 ns/op
# Warmup Iteration   2: 7.362 ns/op
# Warmup Iteration   3: 6.923 ns/op
# Warmup Iteration   4: 7.005 ns/op
# Warmup Iteration   5: 6.951 ns/op
Iteration   1: 6.960 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.951 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.942 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.934 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.950 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 6.987 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 6.936 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 6.942 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 6.966 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 6.927 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU":
  6.898 ±(99.9%) 0.036 ns/op [Average]
  (min, avg, max) = (6.821, 6.898, 6.987), stdev = 0.054
  CI (99.9%): [6.862, 6.933] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement

# Run progress: 87.50% complete, ETA 00:02:38
# Fork: 1 of 3
# Warmup Iteration   1: 6.733 ns/op
# Warmup Iteration   2: 6.342 ns/op
# Warmup Iteration   3: 5.868 ns/op
# Warmup Iteration   4: 5.906 ns/op
# Warmup Iteration   5: 5.879 ns/op
Iteration   1: 5.884 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.899 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.894 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.884 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.901 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 5.902 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 5.906 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 5.897 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 5.840 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 5.870 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 91.67% complete, ETA 00:01:45
# Fork: 2 of 3
# Warmup Iteration   1: 6.595 ns/op
# Warmup Iteration   2: 6.296 ns/op
# Warmup Iteration   3: 5.832 ns/op
# Warmup Iteration   4: 5.843 ns/op
# Warmup Iteration   5: 5.814 ns/op
Iteration   1: 5.839 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.815 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.818 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.836 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.821 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 5.816 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 5.843 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 5.811 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 5.825 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 5.831 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 95.83% complete, ETA 00:00:52
# Fork: 3 of 3
# Warmup Iteration   1: 6.678 ns/op
# Warmup Iteration   2: 6.288 ns/op
# Warmup Iteration   3: 5.841 ns/op
# Warmup Iteration   4: 5.817 ns/op
# Warmup Iteration   5: 5.809 ns/op
Iteration   1: 5.815 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.826 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.814 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.810 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.834 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 5.830 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 5.830 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 5.814 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 5.830 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 5.815 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement":
  5.845 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (5.810, 5.845, 5.906), stdev = 0.034
  CI (99.9%): [5.823, 5.867] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:21:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt     Score    Error   Units
MethodCallBenchmark.directCallConsumeCPU                                                  avgt   30     6.594 ±  0.366   ns/op
MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate                                   avgt   30    ≈ 10⁻⁴           MB/sec
MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate.norm                              avgt   30    ≈ 10⁻⁶             B/op
MethodCallBenchmark.directCallConsumeCPU:·gc.count                                        avgt   30       ≈ 0           counts
MethodCallBenchmark.directCallIncrement                                                   avgt   30     5.137 ±  0.012   ns/op
MethodCallBenchmark.directCallIncrement:·gc.alloc.rate                                    avgt   30    ≈ 10⁻⁴           MB/sec
MethodCallBenchmark.directCallIncrement:·gc.alloc.rate.norm                               avgt   30    ≈ 10⁻⁶             B/op
MethodCallBenchmark.directCallIncrement:·gc.count                                         avgt   30       ≈ 0           counts
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU                                      avgt   30     8.997 ±  0.048   ns/op
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate                       avgt   30    ≈ 10⁻⁴           MB/sec
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate.norm                  avgt   30    ≈ 10⁻⁶             B/op
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.count                            avgt   30       ≈ 0           counts
MethodCallBenchmark.dynamicProxyDirectCallIncrement                                       avgt   30     8.589 ±  0.082   ns/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate                        avgt   30    ≈ 10⁻⁴           MB/sec
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate.norm                   avgt   30    ≈ 10⁻⁶             B/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.count                             avgt   30       ≈ 0           counts
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU                                  avgt   30    11.458 ±  0.057   ns/op
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate                   avgt   30    ≈ 10⁻⁴           MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate.norm              avgt   30    ≈ 10⁻⁶             B/op
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.count                        avgt   30       ≈ 0           counts
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement                                   avgt   30    15.591 ±  0.146   ns/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate                    avgt   30  1258.740 ± 11.729  MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate.norm               avgt   30    24.009 ±  0.001    B/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space           avgt   30  1259.043 ± 12.198  MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space.norm      avgt   30    24.015 ±  0.081    B/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space       avgt   30     0.043 ±  0.015  MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space.norm  avgt   30     0.001 ±  0.001    B/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.count                         avgt   30  2300.000           counts
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.time                          avgt   30   889.000               ms
MethodCallBenchmark.staticProxyConsumeCPU                                                 avgt   30     6.898 ±  0.036   ns/op
MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate                                  avgt   30    ≈ 10⁻⁴           MB/sec
MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate.norm                             avgt   30    ≈ 10⁻⁶             B/op
MethodCallBenchmark.staticProxyConsumeCPU:·gc.count                                       avgt   30       ≈ 0           counts
MethodCallBenchmark.staticProxyIncrement                                                  avgt   30     5.845 ±  0.022   ns/op
MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate                                   avgt   30    ≈ 10⁻⁴           MB/sec
MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate.norm                              avgt   30    ≈ 10⁻⁶             B/op
MethodCallBenchmark.staticProxyIncrement:·gc.count                                        avgt   30       ≈ 0           counts
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/home/kabutz/.m2/repository/org/openjdk/jmh/jmh-core/1.21/jmh-core-1.21.jar) to field java.io.PrintStream.charOut
WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach

# Run progress: 0.00% complete, ETA 00:27:00
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
19.533 ns/op
# Warmup Iteration   2: 19.969 ns/op
# Warmup Iteration   3: 19.527 ns/op
# Warmup Iteration   4: 19.456 ns/op
# Warmup Iteration   5: 19.585 ns/op
Iteration   1: 19.501 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.487 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.536 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.446 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 19.525 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 19.606 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 19.500 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 19.514 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 19.583 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 19.436 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 2.78% complete, ETA 00:30:55
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
19.624 ns/op
# Warmup Iteration   2: 19.874 ns/op
# Warmup Iteration   3: 19.478 ns/op
# Warmup Iteration   4: 19.594 ns/op
# Warmup Iteration   5: 19.581 ns/op
Iteration   1: 19.490 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.564 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.444 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.441 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 19.536 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 19.442 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 19.445 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 19.646 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 19.474 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 19.447 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 5.56% complete, ETA 00:30:01
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
19.700 ns/op
# Warmup Iteration   2: 19.895 ns/op
# Warmup Iteration   3: 19.445 ns/op
# Warmup Iteration   4: 19.606 ns/op
# Warmup Iteration   5: 19.488 ns/op
Iteration   1: 19.488 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.514 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.544 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.429 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 19.526 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 19.464 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 19.467 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 19.439 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 19.490 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 19.450 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach":
  19.496 ±(99.9%) 0.037 ns/op [Average]
  (min, avg, max) = (19.429, 19.496, 19.646), stdev = 0.055
  CI (99.9%): [19.459, 19.532] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterForEach:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize

# Run progress: 8.33% complete, ETA 00:29:07
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
8.899 ns/op
# Warmup Iteration   2: 8.893 ns/op
# Warmup Iteration   3: 8.048 ns/op
# Warmup Iteration   4: 8.013 ns/op
# Warmup Iteration   5: 8.015 ns/op
Iteration   1: 8.069 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.030 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.023 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.048 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.035 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 8.015 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 8.050 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 8.014 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 8.050 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 8.068 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 11.11% complete, ETA 00:28:15
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
8.933 ns/op
# Warmup Iteration   2: 8.961 ns/op
# Warmup Iteration   3: 8.116 ns/op
# Warmup Iteration   4: 8.111 ns/op
# Warmup Iteration   5: 8.089 ns/op
Iteration   1: 8.076 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.017 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.032 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.028 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.026 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 8.027 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 8.032 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 8.032 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 8.065 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 8.031 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 13.89% complete, ETA 00:27:21
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
8.904 ns/op
# Warmup Iteration   2: 8.932 ns/op
# Warmup Iteration   3: 8.028 ns/op
# Warmup Iteration   4: 8.019 ns/op
# Warmup Iteration   5: 8.051 ns/op
Iteration   1: 8.030 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.028 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.056 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.025 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.023 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 8.060 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 8.015 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 8.150 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 8.246 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 8.090 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize":
  8.050 ±(99.9%) 0.031 ns/op [Average]
  (min, avg, max) = (8.014, 8.050, 8.246), stdev = 0.047
  CI (99.9%): [8.019, 8.081] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterSize:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray

# Run progress: 16.67% complete, ETA 00:26:28
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
44.979 ns/op
# Warmup Iteration   2: 40.442 ns/op
# Warmup Iteration   3: 40.239 ns/op
# Warmup Iteration   4: 41.592 ns/op
# Warmup Iteration   5: 41.900 ns/op
Iteration   1: 41.793 ns/op
                 ·gc.alloc.rate:                   1251.902 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1251.950 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.027 B/op
                 ·gc.churn.PS_Survivor_Space:      0.259 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         29.000 ms

Iteration   2: 41.789 ns/op
                 ·gc.alloc.rate:                   1252.062 MB/sec
                 ·gc.alloc.rate.norm:              64.026 B/op
                 ·gc.churn.PS_Eden_Space:          1259.104 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.386 B/op
                 ·gc.churn.PS_Survivor_Space:      0.295 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
                 ·gc.count:                        80.000 counts
                 ·gc.time:                         30.000 ms

Iteration   3: 41.435 ns/op
                 ·gc.alloc.rate:                   1262.698 MB/sec
                 ·gc.alloc.rate.norm:              64.022 B/op
                 ·gc.churn.PS_Eden_Space:          1252.519 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.506 B/op
                 ·gc.churn.PS_Survivor_Space:      0.268 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        70.000 counts
                 ·gc.time:                         30.000 ms

Iteration   4: 41.190 ns/op
                 ·gc.alloc.rate:                   1270.262 MB/sec
                 ·gc.alloc.rate.norm:              64.023 B/op
                 ·gc.churn.PS_Eden_Space:          1271.735 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.097 B/op
                 ·gc.churn.PS_Survivor_Space:      0.232 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         30.000 ms

Iteration   5: 40.813 ns/op
                 ·gc.alloc.rate:                   1282.025 MB/sec
                 ·gc.alloc.rate.norm:              64.023 B/op
                 ·gc.churn.PS_Eden_Space:          1287.334 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.288 B/op
                 ·gc.churn.PS_Survivor_Space:      0.241 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         29.000 ms

Iteration   6: 40.509 ns/op
                 ·gc.alloc.rate:                   1291.719 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1288.788 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.879 B/op
                 ·gc.churn.PS_Survivor_Space:      0.205 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         30.000 ms

Iteration   7: 41.147 ns/op
                 ·gc.alloc.rate:                   1271.653 MB/sec
                 ·gc.alloc.rate.norm:              64.023 B/op
                 ·gc.churn.PS_Eden_Space:          1281.744 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.532 B/op
                 ·gc.churn.PS_Survivor_Space:      0.277 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         30.000 ms

Iteration   8: 41.437 ns/op
                 ·gc.alloc.rate:                   1262.716 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1259.672 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.870 B/op
                 ·gc.churn.PS_Survivor_Space:      0.268 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         30.000 ms

Iteration   9: 41.745 ns/op
                 ·gc.alloc.rate:                   1253.392 MB/sec
                 ·gc.alloc.rate.norm:              64.023 B/op
                 ·gc.churn.PS_Eden_Space:          1248.463 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.771 B/op
                 ·gc.churn.PS_Survivor_Space:      0.330 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
                 ·gc.count:                        70.000 counts
                 ·gc.time:                         30.000 ms

Iteration  10: 41.423 ns/op
                 ·gc.alloc.rate:                   1263.132 MB/sec
                 ·gc.alloc.rate.norm:              64.022 B/op
                 ·gc.churn.PS_Eden_Space:          1272.902 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.518 B/op
                 ·gc.churn.PS_Survivor_Space:      0.223 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
                 ·gc.count:                        70.000 counts
                 ·gc.time:                         30.000 ms


# Run progress: 19.44% complete, ETA 00:25:35
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
46.427 ns/op
# Warmup Iteration   2: 40.742 ns/op
# Warmup Iteration   3: 40.357 ns/op
# Warmup Iteration   4: 40.962 ns/op
# Warmup Iteration   5: 40.891 ns/op
Iteration   1: 41.494 ns/op
                 ·gc.alloc.rate:                   1260.980 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1267.107 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.336 B/op
                 ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         30.000 ms

Iteration   2: 41.821 ns/op
                 ·gc.alloc.rate:                   1251.039 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1250.191 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.982 B/op
                 ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         30.000 ms

Iteration   3: 41.646 ns/op
                 ·gc.alloc.rate:                   1256.342 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1244.233 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.407 B/op
                 ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         29.000 ms

Iteration   4: 41.729 ns/op
                 ·gc.alloc.rate:                   1253.907 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1270.731 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.884 B/op
                 ·gc.churn.PS_Survivor_Space:      0.196 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         30.000 ms

Iteration   5: 41.563 ns/op
                 ·gc.alloc.rate:                   1258.824 MB/sec
                 ·gc.alloc.rate.norm:              64.023 B/op
                 ·gc.churn.PS_Eden_Space:          1257.972 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.980 B/op
                 ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
                 ·gc.count:                        72.000 counts
                 ·gc.time:                         30.000 ms

Iteration   6: 41.852 ns/op
                 ·gc.alloc.rate:                   1250.209 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1245.292 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.772 B/op
                 ·gc.churn.PS_Survivor_Space:      0.205 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         30.000 ms

Iteration   7: 41.681 ns/op
                 ·gc.alloc.rate:                   1255.338 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1259.146 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.218 B/op
                 ·gc.churn.PS_Survivor_Space:      0.179 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         30.000 ms

Iteration   8: 41.721 ns/op
                 ·gc.alloc.rate:                   1254.106 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1249.966 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.812 B/op
                 ·gc.churn.PS_Survivor_Space:      0.286 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
                 ·gc.count:                        73.000 counts
                 ·gc.time:                         29.000 ms

Iteration   9: 41.682 ns/op
                 ·gc.alloc.rate:                   1255.321 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1259.915 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.258 B/op
                 ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         30.000 ms

Iteration  10: 41.696 ns/op
                 ·gc.alloc.rate:                   1254.854 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1257.832 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.176 B/op
                 ·gc.churn.PS_Survivor_Space:      0.232 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         30.000 ms


# Run progress: 22.22% complete, ETA 00:24:42
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
45.709 ns/op
# Warmup Iteration   2: 41.094 ns/op
# Warmup Iteration   3: 39.969 ns/op
# Warmup Iteration   4: 40.904 ns/op
# Warmup Iteration   5: 40.945 ns/op
Iteration   1: 41.041 ns/op
                 ·gc.alloc.rate:                   1274.893 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1284.949 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.530 B/op
                 ·gc.churn.PS_Survivor_Space:      0.241 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         30.000 ms

Iteration   2: 41.297 ns/op
                 ·gc.alloc.rate:                   1266.891 MB/sec
                 ·gc.alloc.rate.norm:              64.023 B/op
                 ·gc.churn.PS_Eden_Space:          1270.092 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.184 B/op
                 ·gc.churn.PS_Survivor_Space:      0.223 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
                 ·gc.count:                        70.000 counts
                 ·gc.time:                         30.000 ms

Iteration   3: 41.701 ns/op
                 ·gc.alloc.rate:                   1254.674 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1243.773 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.469 B/op
                 ·gc.churn.PS_Survivor_Space:      0.259 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         29.000 ms

Iteration   4: 41.582 ns/op
                 ·gc.alloc.rate:                   1258.358 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1263.006 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.262 B/op
                 ·gc.churn.PS_Survivor_Space:      0.295 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         29.000 ms

Iteration   5: 41.580 ns/op
                 ·gc.alloc.rate:                   1258.337 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1264.234 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.324 B/op
                 ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         30.000 ms

Iteration   6: 41.449 ns/op
                 ·gc.alloc.rate:                   1262.364 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1263.743 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.094 B/op
                 ·gc.churn.PS_Survivor_Space:      0.286 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         30.000 ms

Iteration   7: 41.837 ns/op
                 ·gc.alloc.rate:                   1250.692 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1251.906 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.087 B/op
                 ·gc.churn.PS_Survivor_Space:      0.214 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         30.000 ms

Iteration   8: 41.831 ns/op
                 ·gc.alloc.rate:                   1250.829 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1253.989 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.187 B/op
                 ·gc.churn.PS_Survivor_Space:      0.339 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         29.000 ms

Iteration   9: 41.820 ns/op
                 ·gc.alloc.rate:                   1251.185 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1243.583 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.635 B/op
                 ·gc.churn.PS_Survivor_Space:      0.241 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         29.000 ms

Iteration  10: 41.944 ns/op
                 ·gc.alloc.rate:                   1247.417 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1256.674 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.499 B/op
                 ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         30.000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray":
  41.542 ±(99.9%) 0.220 ns/op [Average]
  (min, avg, max) = (40.509, 41.542, 41.944), stdev = 0.330
  CI (99.9%): [41.321, 41.762] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.alloc.rate":
  1259.604 ±(99.9%) 6.765 MB/sec [Average]
  (min, avg, max) = (1247.417, 1259.604, 1291.719), stdev = 10.126
  CI (99.9%): [1252.839, 1266.370] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.alloc.rate.norm":
  64.024 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (64.022, 64.024, 64.026), stdev = 0.001
  CI (99.9%): [64.023, 64.025] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Eden_Space":
  1261.085 ±(99.9%) 8.614 MB/sec [Average]
  (min, avg, max) = (1243.583, 1261.085, 1288.788), stdev = 12.892
  CI (99.9%): [1252.471, 1269.698] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Eden_Space.norm":
  64.099 ±(99.9%) 0.232 B/op [Average]
  (min, avg, max) = (63.407, 64.099, 64.884), stdev = 0.348
  CI (99.9%): [63.867, 64.331] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Survivor_Space":
  0.258 ±(99.9%) 0.029 MB/sec [Average]
  (min, avg, max) = (0.179, 0.258, 0.375), stdev = 0.044
  CI (99.9%): [0.228, 0.287] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Survivor_Space.norm":
  0.013 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (0.009, 0.013, 0.019), stdev = 0.002
  CI (99.9%): [0.012, 0.015] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.count":
  2244.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (70.000, 74.800, 80.000), stdev = 2.809
  CI (99.9%): [2244.000, 2244.000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.classAdapterToArray:·gc.time":
  892.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (29.000, 29.733, 30.000), stdev = 0.450
  CI (99.9%): [892.000, 892.000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach

# Run progress: 25.00% complete, ETA 00:23:49
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
41.246 ns/op
# Warmup Iteration   2: 41.126 ns/op
# Warmup Iteration   3: 41.314 ns/op
# Warmup Iteration   4: 41.341 ns/op
# Warmup Iteration   5: 41.458 ns/op
Iteration   1: 41.793 ns/op
                 ·gc.alloc.rate:                   469.447 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          484.804 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.794 B/op
                 ·gc.churn.PS_Survivor_Space:      0.080 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
                 ·gc.count:                        24.000 counts
                 ·gc.time:                         10.000 ms

Iteration   2: 42.542 ns/op
                 ·gc.alloc.rate:                   461.349 MB/sec
                 ·gc.alloc.rate.norm:              24.019 B/op
                 ·gc.churn.PS_Eden_Space:          470.923 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.518 B/op
                 ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        53.000 counts
                 ·gc.time:                         19.000 ms

Iteration   3: 42.921 ns/op
                 ·gc.alloc.rate:                   457.392 MB/sec
                 ·gc.alloc.rate.norm:              24.024 B/op
                 ·gc.churn.PS_Eden_Space:          456.397 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.971 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        68.000 counts
                 ·gc.time:                         24.000 ms

Iteration   4: 42.590 ns/op
                 ·gc.alloc.rate:                   460.971 MB/sec
                 ·gc.alloc.rate.norm:              24.023 B/op
                 ·gc.churn.PS_Eden_Space:          463.135 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.136 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        69.000 counts
                 ·gc.time:                         24.000 ms

Iteration   5: 41.251 ns/op
                 ·gc.alloc.rate:                   475.940 MB/sec
                 ·gc.alloc.rate.norm:              24.023 B/op
                 ·gc.churn.PS_Eden_Space:          476.562 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.054 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         26.000 ms

Iteration   6: 41.393 ns/op
                 ·gc.alloc.rate:                   474.291 MB/sec
                 ·gc.alloc.rate.norm:              24.023 B/op
                 ·gc.churn.PS_Eden_Space:          476.563 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.138 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         27.000 ms

Iteration   7: 41.278 ns/op
                 ·gc.alloc.rate:                   475.610 MB/sec
                 ·gc.alloc.rate.norm:              24.023 B/op
                 ·gc.churn.PS_Eden_Space:          476.559 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.071 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         26.000 ms

Iteration   8: 41.150 ns/op
                 ·gc.alloc.rate:                   477.095 MB/sec
                 ·gc.alloc.rate.norm:              24.023 B/op
                 ·gc.churn.PS_Eden_Space:          476.551 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.995 B/op
                 ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         27.000 ms

Iteration   9: 41.183 ns/op
                 ·gc.alloc.rate:                   476.710 MB/sec
                 ·gc.alloc.rate.norm:              24.023 B/op
                 ·gc.churn.PS_Eden_Space:          476.568 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.015 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         27.000 ms

Iteration  10: 41.064 ns/op
                 ·gc.alloc.rate:                   478.081 MB/sec
                 ·gc.alloc.rate.norm:              24.022 B/op
                 ·gc.churn.PS_Eden_Space:          476.551 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.946 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         27.000 ms


# Run progress: 27.78% complete, ETA 00:22:57
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
44.768 ns/op
# Warmup Iteration   2: 40.442 ns/op
# Warmup Iteration   3: 39.569 ns/op
# Warmup Iteration   4: 39.464 ns/op
# Warmup Iteration   5: 40.036 ns/op
Iteration   1: 40.109 ns/op
                 ·gc.alloc.rate:                   489.162 MB/sec
                 ·gc.alloc.rate.norm:              24.009 B/op
                 ·gc.churn.PS_Eden_Space:          481.525 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.634 B/op
                 ·gc.churn.PS_Survivor_Space:      0.045 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        26.000 counts
                 ·gc.time:                         11.000 ms

Iteration   2: 41.003 ns/op
                 ·gc.alloc.rate:                   478.727 MB/sec
                 ·gc.alloc.rate.norm:              24.020 B/op
                 ·gc.churn.PS_Eden_Space:          484.963 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.333 B/op
                 ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        59.000 counts
                 ·gc.time:                         24.000 ms

Iteration   3: 41.427 ns/op
                 ·gc.alloc.rate:                   473.917 MB/sec
                 ·gc.alloc.rate.norm:              24.024 B/op
                 ·gc.churn.PS_Eden_Space:          476.555 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.158 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         29.000 ms

Iteration   4: 41.354 ns/op
                 ·gc.alloc.rate:                   474.743 MB/sec
                 ·gc.alloc.rate.norm:              24.023 B/op
                 ·gc.churn.PS_Eden_Space:          476.568 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.115 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         30.000 ms

Iteration   5: 41.200 ns/op
                 ·gc.alloc.rate:                   476.493 MB/sec
                 ·gc.alloc.rate.norm:              24.023 B/op
                 ·gc.churn.PS_Eden_Space:          476.531 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.025 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         29.000 ms

Iteration   6: 41.292 ns/op
                 ·gc.alloc.rate:                   475.459 MB/sec
                 ·gc.alloc.rate.norm:              24.023 B/op
                 ·gc.churn.PS_Eden_Space:          476.566 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.079 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         29.000 ms

Iteration   7: 41.139 ns/op
                 ·gc.alloc.rate:                   477.227 MB/sec
                 ·gc.alloc.rate.norm:              24.023 B/op
                 ·gc.churn.PS_Eden_Space:          476.563 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.989 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         29.000 ms

Iteration   8: 41.225 ns/op
                 ·gc.alloc.rate:                   476.223 MB/sec
                 ·gc.alloc.rate.norm:              24.023 B/op
                 ·gc.churn.PS_Eden_Space:          476.549 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.039 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         29.000 ms

Iteration   9: 41.100 ns/op
                 ·gc.alloc.rate:                   477.667 MB/sec
                 ·gc.alloc.rate.norm:              24.022 B/op
                 ·gc.churn.PS_Eden_Space:          476.556 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.967 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         29.000 ms

Iteration  10: 41.003 ns/op
                 ·gc.alloc.rate:                   478.787 MB/sec
                 ·gc.alloc.rate.norm:              24.023 B/op
                 ·gc.churn.PS_Eden_Space:          483.251 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.247 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        72.000 counts
                 ·gc.time:                         27.000 ms


# Run progress: 30.56% complete, ETA 00:22:04
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
43.482 ns/op
# Warmup Iteration   2: 40.265 ns/op
# Warmup Iteration   3: 39.083 ns/op
# Warmup Iteration   4: 39.304 ns/op
# Warmup Iteration   5: 39.415 ns/op
Iteration   1: 39.771 ns/op
                 ·gc.alloc.rate:                   493.338 MB/sec
                 ·gc.alloc.rate.norm:              24.010 B/op
                 ·gc.churn.PS_Eden_Space:          491.654 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.928 B/op
                 ·gc.churn.PS_Survivor_Space:      0.054 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        28.000 counts
                 ·gc.time:                         11.000 ms

Iteration   2: 40.607 ns/op
                 ·gc.alloc.rate:                   483.411 MB/sec
                 ·gc.alloc.rate.norm:              24.021 B/op
                 ·gc.churn.PS_Eden_Space:          488.371 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.268 B/op
                 ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        62.000 counts
                 ·gc.time:                         24.000 ms

Iteration   3: 41.013 ns/op
                 ·gc.alloc.rate:                   478.667 MB/sec
                 ·gc.alloc.rate.norm:              24.023 B/op
                 ·gc.churn.PS_Eden_Space:          482.251 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.203 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         30.000 ms

Iteration   4: 41.023 ns/op
                 ·gc.alloc.rate:                   478.580 MB/sec
                 ·gc.alloc.rate.norm:              24.023 B/op
                 ·gc.churn.PS_Eden_Space:          478.711 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.029 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         30.000 ms

Iteration   5: 41.467 ns/op
                 ·gc.alloc.rate:                   473.411 MB/sec
                 ·gc.alloc.rate.norm:              24.022 B/op
                 ·gc.churn.PS_Eden_Space:          470.951 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.898 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        69.000 counts
                 ·gc.time:                         29.000 ms

Iteration   6: 40.878 ns/op
                 ·gc.alloc.rate:                   480.265 MB/sec
                 ·gc.alloc.rate.norm:              24.022 B/op
                 ·gc.churn.PS_Eden_Space:          485.556 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.287 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        70.000 counts
                 ·gc.time:                         29.000 ms

Iteration   7: 40.903 ns/op
                 ·gc.alloc.rate:                   479.972 MB/sec
                 ·gc.alloc.rate.norm:              24.022 B/op
                 ·gc.churn.PS_Eden_Space:          476.552 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.851 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         30.000 ms

Iteration   8: 41.003 ns/op
                 ·gc.alloc.rate:                   478.805 MB/sec
                 ·gc.alloc.rate.norm:              24.023 B/op
                 ·gc.churn.PS_Eden_Space:          483.267 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.247 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        72.000 counts
                 ·gc.time:                         28.000 ms

Iteration   9: 40.684 ns/op
                 ·gc.alloc.rate:                   482.553 MB/sec
                 ·gc.alloc.rate.norm:              24.023 B/op
                 ·gc.churn.PS_Eden_Space:          483.270 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24.058 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        72.000 counts
                 ·gc.time:                         28.000 ms

Iteration  10: 40.867 ns/op
                 ·gc.alloc.rate:                   480.373 MB/sec
                 ·gc.alloc.rate.norm:              24.022 B/op
                 ·gc.churn.PS_Eden_Space:          476.543 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23.831 B/op
                 ·gc.churn.PS_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         27.000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach":
  41.208 ±(99.9%) 0.423 ns/op [Average]
  (min, avg, max) = (39.771, 41.208, 42.921), stdev = 0.633
  CI (99.9%): [40.785, 41.631] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.alloc.rate":
  476.489 ±(99.9%) 4.822 MB/sec [Average]
  (min, avg, max) = (457.392, 476.489, 493.338), stdev = 7.218
  CI (99.9%): [471.667, 481.311] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.alloc.rate.norm":
  24.021 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (24.009, 24.021, 24.024), stdev = 0.004
  CI (99.9%): [24.018, 24.024] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Eden_Space":
  477.912 ±(99.9%) 4.606 MB/sec [Average]
  (min, avg, max) = (456.397, 477.912, 491.654), stdev = 6.894
  CI (99.9%): [473.306, 482.519] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Eden_Space.norm":
  24.094 ±(99.9%) 0.145 B/op [Average]
  (min, avg, max) = (23.634, 24.094, 24.794), stdev = 0.217
  CI (99.9%): [23.949, 24.239] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Survivor_Space":
  0.015 ±(99.9%) 0.011 MB/sec [Average]
  (min, avg, max) = (0.009, 0.015, 0.080), stdev = 0.016
  CI (99.9%): [0.005, 0.026] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (≈ 10⁻³, 0.001, 0.004), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.count":
  1951.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (24.000, 65.033, 72.000), stdev = 13.878
  CI (99.9%): [1951.000, 1951.000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterForEach:·gc.time":
  769.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 25.633, 30.000), stdev = 5.623
  CI (99.9%): [769.000, 769.000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize

# Run progress: 33.33% complete, ETA 00:21:11
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
27.826 ns/op
# Warmup Iteration   2: 26.909 ns/op
# Warmup Iteration   3: 26.439 ns/op
# Warmup Iteration   4: 26.565 ns/op
# Warmup Iteration   5: 26.427 ns/op
Iteration   1: 26.517 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 26.522 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 26.384 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 26.390 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 26.476 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 26.437 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 26.591 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 26.533 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 26.416 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 26.395 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 36.11% complete, ETA 00:20:18
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
27.856 ns/op
# Warmup Iteration   2: 27.766 ns/op
# Warmup Iteration   3: 27.580 ns/op
# Warmup Iteration   4: 27.676 ns/op
# Warmup Iteration   5: 27.696 ns/op
Iteration   1: 27.573 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 27.688 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 27.637 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 27.637 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 27.744 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 27.574 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 27.733 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 27.629 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 27.547 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 27.743 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 38.89% complete, ETA 00:19:25
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
27.783 ns/op
# Warmup Iteration   2: 26.813 ns/op
# Warmup Iteration   3: 26.623 ns/op
# Warmup Iteration   4: 26.450 ns/op
# Warmup Iteration   5: 26.451 ns/op
Iteration   1: 26.491 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 26.452 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 26.377 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 26.496 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 26.379 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 26.376 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 26.477 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 26.476 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 26.465 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 26.551 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize":
  26.857 ±(99.9%) 0.384 ns/op [Average]
  (min, avg, max) = (26.376, 26.857, 27.744), stdev = 0.575
  CI (99.9%): [26.473, 27.241] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterSize:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray

# Run progress: 41.67% complete, ETA 00:18:32
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
59.628 ns/op
# Warmup Iteration   2: 52.381 ns/op
# Warmup Iteration   3: 52.543 ns/op
# Warmup Iteration   4: 52.386 ns/op
# Warmup Iteration   5: 53.747 ns/op
Iteration   1: 54.939 ns/op
                 ·gc.alloc.rate:                   952.506 MB/sec
                 ·gc.alloc.rate.norm:              64.034 B/op
                 ·gc.churn.PS_Eden_Space:          956.534 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.305 B/op
                 ·gc.churn.PS_Survivor_Space:      0.223 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         30.000 ms

Iteration   2: 55.346 ns/op
                 ·gc.alloc.rate:                   945.503 MB/sec
                 ·gc.alloc.rate.norm:              64.033 B/op
                 ·gc.churn.PS_Eden_Space:          938.844 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.582 B/op
                 ·gc.churn.PS_Survivor_Space:      0.205 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         29.000 ms

Iteration   3: 54.691 ns/op
                 ·gc.alloc.rate:                   956.799 MB/sec
                 ·gc.alloc.rate.norm:              64.033 B/op
                 ·gc.churn.PS_Eden_Space:          957.788 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.099 B/op
                 ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         30.000 ms

Iteration   4: 54.624 ns/op
                 ·gc.alloc.rate:                   958.030 MB/sec
                 ·gc.alloc.rate.norm:              64.032 B/op
                 ·gc.churn.PS_Eden_Space:          964.137 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.440 B/op
                 ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         30.000 ms

Iteration   5: 54.544 ns/op
                 ·gc.alloc.rate:                   959.376 MB/sec
                 ·gc.alloc.rate.norm:              64.031 B/op
                 ·gc.churn.PS_Eden_Space:          950.266 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.423 B/op
                 ·gc.churn.PS_Survivor_Space:      0.277 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
                 ·gc.count:                        73.000 counts
                 ·gc.time:                         29.000 ms

Iteration   6: 54.932 ns/op
                 ·gc.alloc.rate:                   952.654 MB/sec
                 ·gc.alloc.rate.norm:              64.032 B/op
                 ·gc.churn.PS_Eden_Space:          962.712 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.708 B/op
                 ·gc.churn.PS_Survivor_Space:      0.295 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         30.000 ms

Iteration   7: 55.016 ns/op
                 ·gc.alloc.rate:                   951.152 MB/sec
                 ·gc.alloc.rate.norm:              64.031 B/op
                 ·gc.churn.PS_Eden_Space:          943.949 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.547 B/op
                 ·gc.churn.PS_Survivor_Space:      0.205 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         30.000 ms

Iteration   8: 55.141 ns/op
                 ·gc.alloc.rate:                   949.013 MB/sec
                 ·gc.alloc.rate.norm:              64.031 B/op
                 ·gc.churn.PS_Eden_Space:          956.261 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.520 B/op
                 ·gc.churn.PS_Survivor_Space:      0.214 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         30.000 ms

Iteration   9: 55.087 ns/op
                 ·gc.alloc.rate:                   949.927 MB/sec
                 ·gc.alloc.rate.norm:              64.032 B/op
                 ·gc.churn.PS_Eden_Space:          952.081 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.177 B/op
                 ·gc.churn.PS_Survivor_Space:      0.277 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         30.000 ms

Iteration  10: 54.090 ns/op
                 ·gc.alloc.rate:                   967.447 MB/sec
                 ·gc.alloc.rate.norm:              64.030 B/op
                 ·gc.churn.PS_Eden_Space:          965.133 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.877 B/op
                 ·gc.churn.PS_Survivor_Space:      0.214 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        73.000 counts
                 ·gc.time:                         29.000 ms


# Run progress: 44.44% complete, ETA 00:17:39
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
65.811 ns/op
# Warmup Iteration   2: 57.030 ns/op
# Warmup Iteration   3: 58.826 ns/op
# Warmup Iteration   4: 56.111 ns/op
# Warmup Iteration   5: 57.216 ns/op
Iteration   1: 59.201 ns/op
                 ·gc.alloc.rate:                   883.941 MB/sec
                 ·gc.alloc.rate.norm:              64.036 B/op
                 ·gc.churn.PS_Eden_Space:          899.666 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     65.175 B/op
                 ·gc.churn.PS_Survivor_Space:      0.214 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
                 ·gc.count:                        73.000 counts
                 ·gc.time:                         29.000 ms

Iteration   2: 58.594 ns/op
                 ·gc.alloc.rate:                   893.064 MB/sec
                 ·gc.alloc.rate.norm:              64.034 B/op
                 ·gc.churn.PS_Eden_Space:          884.806 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.441 B/op
                 ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
                 ·gc.count:                        72.000 counts
                 ·gc.time:                         29.000 ms

Iteration   3: 58.803 ns/op
                 ·gc.alloc.rate:                   889.880 MB/sec
                 ·gc.alloc.rate.norm:              64.034 B/op
                 ·gc.churn.PS_Eden_Space:          891.932 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.181 B/op
                 ·gc.churn.PS_Survivor_Space:      0.205 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
                 ·gc.count:                        73.000 counts
                 ·gc.time:                         30.000 ms

Iteration   4: 58.594 ns/op
                 ·gc.alloc.rate:                   893.088 MB/sec
                 ·gc.alloc.rate.norm:              64.032 B/op
                 ·gc.churn.PS_Eden_Space:          893.133 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.035 B/op
                 ·gc.churn.PS_Survivor_Space:      0.196 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        70.000 counts
                 ·gc.time:                         30.000 ms

Iteration   5: 58.748 ns/op
                 ·gc.alloc.rate:                   890.741 MB/sec
                 ·gc.alloc.rate.norm:              64.034 B/op
                 ·gc.churn.PS_Eden_Space:          895.247 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.357 B/op
                 ·gc.churn.PS_Survivor_Space:      0.241 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         31.000 ms

Iteration   6: 58.887 ns/op
                 ·gc.alloc.rate:                   888.692 MB/sec
                 ·gc.alloc.rate.norm:              64.033 B/op
                 ·gc.churn.PS_Eden_Space:          886.431 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.870 B/op
                 ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        72.000 counts
                 ·gc.time:                         29.000 ms

Iteration   7: 58.367 ns/op
                 ·gc.alloc.rate:                   896.604 MB/sec
                 ·gc.alloc.rate.norm:              64.033 B/op
                 ·gc.churn.PS_Eden_Space:          905.151 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.643 B/op
                 ·gc.churn.PS_Survivor_Space:      0.179 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
                 ·gc.count:                        73.000 counts
                 ·gc.time:                         30.000 ms

Iteration   8: 58.759 ns/op
                 ·gc.alloc.rate:                   890.452 MB/sec
                 ·gc.alloc.rate.norm:              64.022 B/op
                 ·gc.churn.PS_Eden_Space:          890.575 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.031 B/op
                 ·gc.churn.PS_Survivor_Space:      0.179 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
                 ·gc.count:                        49.000 counts
                 ·gc.time:                         23.000 ms

Iteration   9: 58.022 ns/op
                 ·gc.alloc.rate:                   901.924 MB/sec
                 ·gc.alloc.rate.norm:              64.032 B/op
                 ·gc.churn.PS_Eden_Space:          898.445 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.785 B/op
                 ·gc.churn.PS_Survivor_Space:      0.232 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
                 ·gc.count:                        72.000 counts
                 ·gc.time:                         28.000 ms

Iteration  10: 60.822 ns/op
                 ·gc.alloc.rate:                   860.344 MB/sec
                 ·gc.alloc.rate.norm:              64.033 B/op
                 ·gc.churn.PS_Eden_Space:          857.407 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.814 B/op
                 ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
                 ·gc.count:                        70.000 counts
                 ·gc.time:                         29.000 ms


# Run progress: 47.22% complete, ETA 00:16:46
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
64.291 ns/op
# Warmup Iteration   2: 52.984 ns/op
# Warmup Iteration   3: 53.063 ns/op
# Warmup Iteration   4: 53.199 ns/op
# Warmup Iteration   5: 54.345 ns/op
Iteration   1: 55.475 ns/op
                 ·gc.alloc.rate:                   943.304 MB/sec
                 ·gc.alloc.rate.norm:              64.035 B/op
                 ·gc.churn.PS_Eden_Space:          947.786 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.339 B/op
                 ·gc.churn.PS_Survivor_Space:      0.232 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         30.000 ms

Iteration   2: 54.788 ns/op
                 ·gc.alloc.rate:                   955.156 MB/sec
                 ·gc.alloc.rate.norm:              64.036 B/op
                 ·gc.churn.PS_Eden_Space:          960.354 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.384 B/op
                 ·gc.churn.PS_Survivor_Space:      0.214 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        83.000 counts
                 ·gc.time:                         30.000 ms

Iteration   3: 54.203 ns/op
                 ·gc.alloc.rate:                   965.395 MB/sec
                 ·gc.alloc.rate.norm:              64.033 B/op
                 ·gc.churn.PS_Eden_Space:          959.315 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.629 B/op
                 ·gc.churn.PS_Survivor_Space:      0.214 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         30.000 ms

Iteration   4: 54.356 ns/op
                 ·gc.alloc.rate:                   962.734 MB/sec
                 ·gc.alloc.rate.norm:              64.032 B/op
                 ·gc.churn.PS_Eden_Space:          965.097 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.189 B/op
                 ·gc.churn.PS_Survivor_Space:      0.232 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         30.000 ms

Iteration   5: 55.245 ns/op
                 ·gc.alloc.rate:                   947.221 MB/sec
                 ·gc.alloc.rate.norm:              64.032 B/op
                 ·gc.churn.PS_Eden_Space:          951.222 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.303 B/op
                 ·gc.churn.PS_Survivor_Space:      0.286 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         29.000 ms

Iteration   6: 54.825 ns/op
                 ·gc.alloc.rate:                   954.495 MB/sec
                 ·gc.alloc.rate.norm:              64.032 B/op
                 ·gc.churn.PS_Eden_Space:          958.108 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.275 B/op
                 ·gc.churn.PS_Survivor_Space:      0.205 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         30.000 ms

Iteration   7: 55.014 ns/op
                 ·gc.alloc.rate:                   951.214 MB/sec
                 ·gc.alloc.rate.norm:              64.031 B/op
                 ·gc.churn.PS_Eden_Space:          943.824 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.534 B/op
                 ·gc.churn.PS_Survivor_Space:      0.196 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         29.000 ms

Iteration   8: 55.045 ns/op
                 ·gc.alloc.rate:                   950.668 MB/sec
                 ·gc.alloc.rate.norm:              64.033 B/op
                 ·gc.churn.PS_Eden_Space:          951.378 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.080 B/op
                 ·gc.churn.PS_Survivor_Space:      0.214 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         30.000 ms

Iteration   9: 54.893 ns/op
                 ·gc.alloc.rate:                   953.290 MB/sec
                 ·gc.alloc.rate.norm:              64.031 B/op
                 ·gc.churn.PS_Eden_Space:          953.834 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.067 B/op
                 ·gc.churn.PS_Survivor_Space:      0.179 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        72.000 counts
                 ·gc.time:                         29.000 ms

Iteration  10: 56.806 ns/op
                 ·gc.alloc.rate:                   921.172 MB/sec
                 ·gc.alloc.rate.norm:              64.031 B/op
                 ·gc.churn.PS_Eden_Space:          919.699 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.929 B/op
                 ·gc.churn.PS_Survivor_Space:      0.205 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         28.000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray":
  56.262 ±(99.9%) 1.324 ns/op [Average]
  (min, avg, max) = (54.090, 56.262, 60.822), stdev = 1.982
  CI (99.9%): [54.937, 57.586] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.alloc.rate":
  931.193 ±(99.9%) 21.397 MB/sec [Average]
  (min, avg, max) = (860.344, 931.193, 967.447), stdev = 32.027
  CI (99.9%): [909.795, 952.590] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.alloc.rate.norm":
  64.032 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (64.022, 64.032, 64.036), stdev = 0.002
  CI (99.9%): [64.031, 64.034] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Eden_Space":
  932.037 ±(99.9%) 21.449 MB/sec [Average]
  (min, avg, max) = (857.407, 932.037, 965.133), stdev = 32.103
  CI (99.9%): [910.589, 953.486] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Eden_Space.norm":
  64.091 ±(99.9%) 0.271 B/op [Average]
  (min, avg, max) = (63.423, 64.091, 65.175), stdev = 0.406
  CI (99.9%): [63.820, 64.363] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Survivor_Space":
  0.228 ±(99.9%) 0.028 MB/sec [Average]
  (min, avg, max) = (0.179, 0.228, 0.312), stdev = 0.042
  CI (99.9%): [0.200, 0.256] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Survivor_Space.norm":
  0.016 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.023), stdev = 0.003
  CI (99.9%): [0.014, 0.018] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.count":
  2204.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (49.000, 73.467, 83.000), stdev = 5.296
  CI (99.9%): [2204.000, 2204.000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.dynamicObjectAdapterToArray:·gc.time":
  880.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (23.000, 29.333, 31.000), stdev = 1.373
  CI (99.9%): [880.000, 880.000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach

# Run progress: 50.00% complete, ETA 00:15:53
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
21.709 ns/op
# Warmup Iteration   2: 21.220 ns/op
# Warmup Iteration   3: 21.236 ns/op
# Warmup Iteration   4: 21.331 ns/op
# Warmup Iteration   5: 21.203 ns/op
Iteration   1: 21.165 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 21.293 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 21.162 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 21.205 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 21.323 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 21.153 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 21.165 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 21.294 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 21.318 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 21.194 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 52.78% complete, ETA 00:15:00
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
21.848 ns/op
# Warmup Iteration   2: 21.381 ns/op
# Warmup Iteration   3: 21.388 ns/op
# Warmup Iteration   4: 21.340 ns/op
# Warmup Iteration   5: 21.453 ns/op
Iteration   1: 21.427 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 21.472 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 21.470 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 21.490 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 21.389 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 21.397 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 21.456 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 21.400 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 21.453 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 21.505 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 55.56% complete, ETA 00:14:07
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
21.816 ns/op
# Warmup Iteration   2: 21.455 ns/op
# Warmup Iteration   3: 21.660 ns/op
# Warmup Iteration   4: 21.429 ns/op
# Warmup Iteration   5: 21.428 ns/op
Iteration   1: 21.511 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 21.489 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 21.415 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 21.451 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 21.354 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 21.383 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 21.369 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 21.380 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 21.359 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 21.316 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach":
  21.359 ±(99.9%) 0.075 ns/op [Average]
  (min, avg, max) = (21.153, 21.359, 21.511), stdev = 0.112
  CI (99.9%): [21.284, 21.433] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterForEach:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize

# Run progress: 58.33% complete, ETA 00:13:14
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
10.506 ns/op
# Warmup Iteration   2: 10.350 ns/op
# Warmup Iteration   3: 9.230 ns/op
# Warmup Iteration   4: 9.227 ns/op
# Warmup Iteration   5: 9.277 ns/op
Iteration   1: 9.236 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.213 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.251 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.230 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.231 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 9.268 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 9.233 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 9.245 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 9.266 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 9.216 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 61.11% complete, ETA 00:12:21
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
10.471 ns/op
# Warmup Iteration   2: 10.310 ns/op
# Warmup Iteration   3: 9.211 ns/op
# Warmup Iteration   4: 9.225 ns/op
# Warmup Iteration   5: 9.247 ns/op
Iteration   1: 9.318 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.324 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.406 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.389 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.352 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 9.388 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 9.325 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 9.400 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 9.322 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 9.331 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 63.89% complete, ETA 00:11:28
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
10.635 ns/op
# Warmup Iteration   2: 10.345 ns/op
# Warmup Iteration   3: 9.315 ns/op
# Warmup Iteration   4: 9.334 ns/op
# Warmup Iteration   5: 9.298 ns/op
Iteration   1: 9.989 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.347 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.302 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.304 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.365 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 9.291 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 9.316 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 9.358 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 9.295 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 9.302 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize":
  9.327 ±(99.9%) 0.092 ns/op [Average]
  (min, avg, max) = (9.213, 9.327, 9.989), stdev = 0.137
  CI (99.9%): [9.236, 9.419] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterSize:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray

# Run progress: 66.67% complete, ETA 00:10:35
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
47.792 ns/op
# Warmup Iteration   2: 42.069 ns/op
# Warmup Iteration   3: 41.730 ns/op
# Warmup Iteration   4: 43.116 ns/op
# Warmup Iteration   5: 43.732 ns/op
Iteration   1: 43.888 ns/op
                 ·gc.alloc.rate:                   1192.197 MB/sec
                 ·gc.alloc.rate.norm:              64.026 B/op
                 ·gc.churn.PS_Eden_Space:          1189.832 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.899 B/op
                 ·gc.churn.PS_Survivor_Space:      0.223 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         29.000 ms

Iteration   2: 44.024 ns/op
                 ·gc.alloc.rate:                   1188.480 MB/sec
                 ·gc.alloc.rate.norm:              64.026 B/op
                 ·gc.churn.PS_Eden_Space:          1182.664 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.713 B/op
                 ·gc.churn.PS_Survivor_Space:      0.241 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         30.000 ms

Iteration   3: 43.082 ns/op
                 ·gc.alloc.rate:                   1214.439 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1201.356 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.334 B/op
                 ·gc.churn.PS_Survivor_Space:      0.232 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         30.000 ms

Iteration   4: 43.131 ns/op
                 ·gc.alloc.rate:                   1213.210 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1224.548 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.623 B/op
                 ·gc.churn.PS_Survivor_Space:      0.268 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         30.000 ms

Iteration   5: 42.903 ns/op
                 ·gc.alloc.rate:                   1219.564 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1218.167 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.952 B/op
                 ·gc.churn.PS_Survivor_Space:      0.277 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         30.000 ms

Iteration   6: 42.932 ns/op
                 ·gc.alloc.rate:                   1218.747 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1211.725 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.656 B/op
                 ·gc.churn.PS_Survivor_Space:      0.232 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         30.000 ms

Iteration   7: 43.126 ns/op
                 ·gc.alloc.rate:                   1213.342 MB/sec
                 ·gc.alloc.rate.norm:              64.027 B/op
                 ·gc.churn.PS_Eden_Space:          1211.895 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.950 B/op
                 ·gc.churn.PS_Survivor_Space:      0.205 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
                 ·gc.count:                        80.000 counts
                 ·gc.time:                         30.000 ms

Iteration   8: 43.015 ns/op
                 ·gc.alloc.rate:                   1216.407 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1230.865 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.786 B/op
                 ·gc.churn.PS_Survivor_Space:      0.286 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         30.000 ms

Iteration   9: 42.919 ns/op
                 ·gc.alloc.rate:                   1219.140 MB/sec
                 ·gc.alloc.rate.norm:              64.023 B/op
                 ·gc.churn.PS_Eden_Space:          1220.485 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.094 B/op
                 ·gc.churn.PS_Survivor_Space:      0.241 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
                 ·gc.count:                        70.000 counts
                 ·gc.time:                         30.000 ms

Iteration  10: 42.602 ns/op
                 ·gc.alloc.rate:                   1228.133 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1222.237 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.717 B/op
                 ·gc.churn.PS_Survivor_Space:      0.339 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
                 ·gc.count:                        73.000 counts
                 ·gc.time:                         30.000 ms


# Run progress: 69.44% complete, ETA 00:09:42
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
47.193 ns/op
# Warmup Iteration   2: 42.008 ns/op
# Warmup Iteration   3: 41.392 ns/op
# Warmup Iteration   4: 42.112 ns/op
# Warmup Iteration   5: 43.068 ns/op
Iteration   1: 42.964 ns/op
                 ·gc.alloc.rate:                   1217.815 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1225.690 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.439 B/op
                 ·gc.churn.PS_Survivor_Space:      0.161 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         30.000 ms

Iteration   2: 43.063 ns/op
                 ·gc.alloc.rate:                   1215.007 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1219.273 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.249 B/op
                 ·gc.churn.PS_Survivor_Space:      0.214 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
                 ·gc.count:                        72.000 counts
                 ·gc.time:                         30.000 ms

Iteration   3: 43.187 ns/op
                 ·gc.alloc.rate:                   1211.436 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1202.621 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.558 B/op
                 ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
                 ·gc.count:                        72.000 counts
                 ·gc.time:                         30.000 ms

Iteration   4: 43.260 ns/op
                 ·gc.alloc.rate:                   1209.530 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1209.285 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.012 B/op
                 ·gc.churn.PS_Survivor_Space:      0.223 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         30.000 ms

Iteration   5: 43.112 ns/op
                 ·gc.alloc.rate:                   1213.572 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1210.785 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.878 B/op
                 ·gc.churn.PS_Survivor_Space:      0.277 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         30.000 ms

Iteration   6: 42.829 ns/op
                 ·gc.alloc.rate:                   1221.690 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1228.726 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.393 B/op
                 ·gc.churn.PS_Survivor_Space:      0.214 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
                 ·gc.count:                        73.000 counts
                 ·gc.time:                         31.000 ms

Iteration   7: 42.867 ns/op
                 ·gc.alloc.rate:                   1220.660 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1229.011 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.463 B/op
                 ·gc.churn.PS_Survivor_Space:      0.259 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         30.000 ms

Iteration   8: 42.797 ns/op
                 ·gc.alloc.rate:                   1222.589 MB/sec
                 ·gc.alloc.rate.norm:              64.026 B/op
                 ·gc.churn.PS_Eden_Space:          1219.420 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.860 B/op
                 ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         29.000 ms

Iteration   9: 42.186 ns/op
                 ·gc.alloc.rate:                   1240.357 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1239.184 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.964 B/op
                 ·gc.churn.PS_Survivor_Space:      0.205 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         30.000 ms

Iteration  10: 42.916 ns/op
                 ·gc.alloc.rate:                   1219.222 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1223.442 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.247 B/op
                 ·gc.churn.PS_Survivor_Space:      0.179 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         28.000 ms


# Run progress: 72.22% complete, ETA 00:08:49
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
47.000 ns/op
# Warmup Iteration   2: 41.868 ns/op
# Warmup Iteration   3: 41.475 ns/op
# Warmup Iteration   4: 42.333 ns/op
# Warmup Iteration   5: 43.535 ns/op
Iteration   1: 43.424 ns/op
                 ·gc.alloc.rate:                   1204.916 MB/sec
                 ·gc.alloc.rate.norm:              64.026 B/op
                 ·gc.churn.PS_Eden_Space:          1210.839 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.340 B/op
                 ·gc.churn.PS_Survivor_Space:      0.205 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         30.000 ms

Iteration   2: 43.224 ns/op
                 ·gc.alloc.rate:                   1210.487 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1216.863 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.362 B/op
                 ·gc.churn.PS_Survivor_Space:      0.232 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        73.000 counts
                 ·gc.time:                         31.000 ms

Iteration   3: 43.296 ns/op
                 ·gc.alloc.rate:                   1208.491 MB/sec
                 ·gc.alloc.rate.norm:              64.026 B/op
                 ·gc.churn.PS_Eden_Space:          1203.702 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.772 B/op
                 ·gc.churn.PS_Survivor_Space:      0.214 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         29.000 ms

Iteration   4: 42.932 ns/op
                 ·gc.alloc.rate:                   1218.756 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1213.316 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.739 B/op
                 ·gc.churn.PS_Survivor_Space:      0.295 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         29.000 ms

Iteration   5: 43.381 ns/op
                 ·gc.alloc.rate:                   1206.086 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1205.968 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.019 B/op
                 ·gc.churn.PS_Survivor_Space:      0.259 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         30.000 ms

Iteration   6: 43.174 ns/op
                 ·gc.alloc.rate:                   1211.941 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1220.180 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.459 B/op
                 ·gc.churn.PS_Survivor_Space:      0.241 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         31.000 ms

Iteration   7: 42.950 ns/op
                 ·gc.alloc.rate:                   1218.283 MB/sec
                 ·gc.alloc.rate.norm:              64.023 B/op
                 ·gc.churn.PS_Eden_Space:          1224.779 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.364 B/op
                 ·gc.churn.PS_Survivor_Space:      0.214 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
                 ·gc.count:                        69.000 counts
                 ·gc.time:                         30.000 ms

Iteration   8: 43.207 ns/op
                 ·gc.alloc.rate:                   1210.974 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1201.881 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.543 B/op
                 ·gc.churn.PS_Survivor_Space:      0.259 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        72.000 counts
                 ·gc.time:                         28.000 ms

Iteration   9: 43.420 ns/op
                 ·gc.alloc.rate:                   1205.075 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1202.451 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.885 B/op
                 ·gc.churn.PS_Survivor_Space:      0.286 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         30.000 ms

Iteration  10: 43.093 ns/op
                 ·gc.alloc.rate:                   1214.302 MB/sec
                 ·gc.alloc.rate.norm:              64.025 B/op
                 ·gc.churn.PS_Eden_Space:          1227.975 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.746 B/op
                 ·gc.churn.PS_Survivor_Space:      0.196 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         30.000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray":
  43.097 ±(99.9%) 0.228 ns/op [Average]
  (min, avg, max) = (42.186, 43.097, 44.024), stdev = 0.341
  CI (99.9%): [42.869, 43.325] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.alloc.rate":
  1214.162 ±(99.9%) 6.418 MB/sec [Average]
  (min, avg, max) = (1188.480, 1214.162, 1240.357), stdev = 9.606
  CI (99.9%): [1207.744, 1220.580] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.alloc.rate.norm":
  64.025 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (64.023, 64.025, 64.027), stdev = 0.001
  CI (99.9%): [64.024, 64.025] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Eden_Space":
  1214.972 ±(99.9%) 8.388 MB/sec [Average]
  (min, avg, max) = (1182.664, 1214.972, 1239.184), stdev = 12.554
  CI (99.9%): [1206.585, 1223.360] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Eden_Space.norm":
  64.067 ±(99.9%) 0.249 B/op [Average]
  (min, avg, max) = (63.334, 64.067, 64.786), stdev = 0.372
  CI (99.9%): [63.818, 64.316] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Survivor_Space":
  0.241 ±(99.9%) 0.027 MB/sec [Average]
  (min, avg, max) = (0.161, 0.241, 0.339), stdev = 0.040
  CI (99.9%): [0.215, 0.268] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Survivor_Space.norm":
  0.013 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.008, 0.013, 0.018), stdev = 0.002
  CI (99.9%): [0.011, 0.014] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.count":
  2225.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (69.000, 74.167, 80.000), stdev = 2.365
  CI (99.9%): [2225.000, 2225.000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.objectAdapterToArray:·gc.time":
  895.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (28.000, 29.833, 31.000), stdev = 0.699
  CI (99.9%): [895.000, 895.000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach

# Run progress: 75.00% complete, ETA 00:07:56
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
19.563 ns/op
# Warmup Iteration   2: 19.947 ns/op
# Warmup Iteration   3: 19.481 ns/op
# Warmup Iteration   4: 19.441 ns/op
# Warmup Iteration   5: 19.524 ns/op
Iteration   1: 19.479 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.450 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.547 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.452 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 19.492 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 19.549 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 19.459 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 19.455 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 19.579 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 19.471 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 77.78% complete, ETA 00:07:03
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
19.532 ns/op
# Warmup Iteration   2: 19.873 ns/op
# Warmup Iteration   3: 19.476 ns/op
# Warmup Iteration   4: 19.591 ns/op
# Warmup Iteration   5: 19.514 ns/op
Iteration   1: 19.458 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.520 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.481 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.492 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 19.559 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 19.546 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 19.439 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 19.516 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 19.541 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 19.482 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 80.56% complete, ETA 00:06:10
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
19.650 ns/op
# Warmup Iteration   2: 19.869 ns/op
# Warmup Iteration   3: 19.470 ns/op
# Warmup Iteration   4: 19.555 ns/op
# Warmup Iteration   5: 19.442 ns/op
Iteration   1: 19.459 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.557 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.449 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.506 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 19.574 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 19.491 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 19.442 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 19.495 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 19.458 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 19.493 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach":
  19.496 ±(99.9%) 0.028 ns/op [Average]
  (min, avg, max) = (19.439, 19.496, 19.579), stdev = 0.043
  CI (99.9%): [19.468, 19.525] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainForEach:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize

# Run progress: 83.33% complete, ETA 00:05:17
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
8.914 ns/op
# Warmup Iteration   2: 8.899 ns/op
# Warmup Iteration   3: 8.068 ns/op
# Warmup Iteration   4: 8.015 ns/op
# Warmup Iteration   5: 8.026 ns/op
Iteration   1: 8.065 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.017 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.039 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.047 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.032 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 8.016 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 8.302 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 8.033 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 8.024 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 8.085 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 86.11% complete, ETA 00:04:24
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
9.011 ns/op
# Warmup Iteration   2: 8.906 ns/op
# Warmup Iteration   3: 8.110 ns/op
# Warmup Iteration   4: 8.016 ns/op
# Warmup Iteration   5: 8.064 ns/op
Iteration   1: 8.053 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.039 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.029 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.050 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.020 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 8.036 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 8.023 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 8.044 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 8.040 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 8.034 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 88.89% complete, ETA 00:03:31
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
8.937 ns/op
# Warmup Iteration   2: 8.938 ns/op
# Warmup Iteration   3: 8.021 ns/op
# Warmup Iteration   4: 8.015 ns/op
# Warmup Iteration   5: 8.069 ns/op
Iteration   1: 8.015 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.021 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.055 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.035 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.037 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   6: 8.071 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   7: 8.012 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   8: 8.024 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   9: 8.062 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration  10: 8.032 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize":
  8.046 ±(99.9%) 0.034 ns/op [Average]
  (min, avg, max) = (8.012, 8.046, 8.302), stdev = 0.051
  CI (99.9%): [8.012, 8.081] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainSize:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 14, OpenJDK 64-Bit Server VM, 14+36-1461
# VM invoker: /opt/jdk-14/bin/java
# VM options: -Deu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher.enabled=true -XX:+UseParallelGC
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray

# Run progress: 91.67% complete, ETA 00:02:38
# Fork: 1 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
41.436 ns/op
# Warmup Iteration   2: 37.452 ns/op
# Warmup Iteration   3: 35.346 ns/op
# Warmup Iteration   4: 36.425 ns/op
# Warmup Iteration   5: 36.510 ns/op
Iteration   1: 36.525 ns/op
                 ·gc.alloc.rate:                   1432.495 MB/sec
                 ·gc.alloc.rate.norm:              64.022 B/op
                 ·gc.churn.PS_Eden_Space:          1436.076 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.182 B/op
                 ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         30.000 ms

Iteration   2: 36.479 ns/op
                 ·gc.alloc.rate:                   1434.162 MB/sec
                 ·gc.alloc.rate.norm:              64.021 B/op
                 ·gc.churn.PS_Eden_Space:          1432.244 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.935 B/op
                 ·gc.churn.PS_Survivor_Space:      0.178 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
                 ·gc.count:                        72.000 counts
                 ·gc.time:                         29.000 ms

Iteration   3: 36.608 ns/op
                 ·gc.alloc.rate:                   1429.100 MB/sec
                 ·gc.alloc.rate.norm:              64.021 B/op
                 ·gc.churn.PS_Eden_Space:          1429.799 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.053 B/op
                 ·gc.churn.PS_Survivor_Space:      0.232 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         30.000 ms

Iteration   4: 36.665 ns/op
                 ·gc.alloc.rate:                   1427.035 MB/sec
                 ·gc.alloc.rate.norm:              64.021 B/op
                 ·gc.churn.PS_Eden_Space:          1439.676 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.589 B/op
                 ·gc.churn.PS_Survivor_Space:      0.223 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         31.000 ms

Iteration   5: 36.773 ns/op
                 ·gc.alloc.rate:                   1422.708 MB/sec
                 ·gc.alloc.rate.norm:              64.020 B/op
                 ·gc.churn.PS_Eden_Space:          1407.604 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.341 B/op
                 ·gc.churn.PS_Survivor_Space:      0.232 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
                 ·gc.count:                        72.000 counts
                 ·gc.time:                         28.000 ms

Iteration   6: 36.740 ns/op
                 ·gc.alloc.rate:                   1424.079 MB/sec
                 ·gc.alloc.rate.norm:              64.022 B/op
                 ·gc.churn.PS_Eden_Space:          1432.047 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.380 B/op
                 ·gc.churn.PS_Survivor_Space:      0.196 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         30.000 ms

Iteration   7: 36.454 ns/op
                 ·gc.alloc.rate:                   1435.274 MB/sec
                 ·gc.alloc.rate.norm:              64.020 B/op
                 ·gc.churn.PS_Eden_Space:          1444.271 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.422 B/op
                 ·gc.churn.PS_Survivor_Space:      0.241 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
                 ·gc.count:                        72.000 counts
                 ·gc.time:                         29.000 ms

Iteration   8: 36.790 ns/op
                 ·gc.alloc.rate:                   1422.077 MB/sec
                 ·gc.alloc.rate.norm:              64.019 B/op
                 ·gc.churn.PS_Eden_Space:          1404.348 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.221 B/op
                 ·gc.churn.PS_Survivor_Space:      0.286 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
                 ·gc.count:                        68.000 counts
                 ·gc.time:                         33.000 ms

Iteration   9: 35.444 ns/op
                 ·gc.alloc.rate:                   1475.990 MB/sec
                 ·gc.alloc.rate.norm:              64.013 B/op
                 ·gc.churn.PS_Eden_Space:          1490.172 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.628 B/op
                 ·gc.churn.PS_Survivor_Space:      0.116 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
                 ·gc.count:                        49.000 counts
                 ·gc.time:                         19.000 ms

Iteration  10: 36.040 ns/op
                 ·gc.alloc.rate:                   1451.693 MB/sec
                 ·gc.alloc.rate.norm:              64.021 B/op
                 ·gc.churn.PS_Eden_Space:          1438.001 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.417 B/op
                 ·gc.churn.PS_Survivor_Space:      0.268 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         30.000 ms


# Run progress: 94.44% complete, ETA 00:01:45
# Fork: 2 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
42.597 ns/op
# Warmup Iteration   2: 38.413 ns/op
# Warmup Iteration   3: 37.872 ns/op
# Warmup Iteration   4: 39.352 ns/op
# Warmup Iteration   5: 39.917 ns/op
Iteration   1: 39.820 ns/op
                 ·gc.alloc.rate:                   1313.927 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1320.105 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.325 B/op
                 ·gc.churn.PS_Survivor_Space:      0.268 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         30.000 ms

Iteration   2: 39.327 ns/op
                 ·gc.alloc.rate:                   1330.426 MB/sec
                 ·gc.alloc.rate.norm:              64.023 B/op
                 ·gc.churn.PS_Eden_Space:          1324.684 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.747 B/op
                 ·gc.churn.PS_Survivor_Space:      0.303 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         29.000 ms

Iteration   3: 39.277 ns/op
                 ·gc.alloc.rate:                   1332.102 MB/sec
                 ·gc.alloc.rate.norm:              64.024 B/op
                 ·gc.churn.PS_Eden_Space:          1329.669 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.907 B/op
                 ·gc.churn.PS_Survivor_Space:      0.259 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         31.000 ms

Iteration   4: 39.075 ns/op
                 ·gc.alloc.rate:                   1339.027 MB/sec
                 ·gc.alloc.rate.norm:              64.022 B/op
                 ·gc.churn.PS_Eden_Space:          1338.903 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.016 B/op
                 ·gc.churn.PS_Survivor_Space:      0.286 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         29.000 ms

Iteration   5: 39.074 ns/op
                 ·gc.alloc.rate:                   1339.057 MB/sec
                 ·gc.alloc.rate.norm:              64.023 B/op
                 ·gc.churn.PS_Eden_Space:          1351.144 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.601 B/op
                 ·gc.churn.PS_Survivor_Space:      0.259 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         29.000 ms

Iteration   6: 38.641 ns/op
                 ·gc.alloc.rate:                   1354.121 MB/sec
                 ·gc.alloc.rate.norm:              64.023 B/op
                 ·gc.churn.PS_Eden_Space:          1354.765 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.053 B/op
                 ·gc.churn.PS_Survivor_Space:      0.357 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         30.000 ms

Iteration   7: 39.092 ns/op
                 ·gc.alloc.rate:                   1338.444 MB/sec
                 ·gc.alloc.rate.norm:              64.021 B/op
                 ·gc.churn.PS_Eden_Space:          1337.640 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.983 B/op
                 ·gc.churn.PS_Survivor_Space:      0.241 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        70.000 counts
                 ·gc.time:                         29.000 ms

Iteration   8: 39.222 ns/op
                 ·gc.alloc.rate:                   1334.007 MB/sec
                 ·gc.alloc.rate.norm:              64.022 B/op
                 ·gc.churn.PS_Eden_Space:          1337.427 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.187 B/op
                 ·gc.churn.PS_Survivor_Space:      0.259 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         30.000 ms

Iteration   9: 38.636 ns/op
                 ·gc.alloc.rate:                   1354.233 MB/sec
                 ·gc.alloc.rate.norm:              64.022 B/op
                 ·gc.churn.PS_Eden_Space:          1355.519 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.083 B/op
                 ·gc.churn.PS_Survivor_Space:      0.303 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         29.000 ms

Iteration  10: 39.097 ns/op
                 ·gc.alloc.rate:                   1338.272 MB/sec
                 ·gc.alloc.rate.norm:              64.023 B/op
                 ·gc.churn.PS_Eden_Space:          1335.380 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.884 B/op
                 ·gc.churn.PS_Survivor_Space:      0.259 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        75.000 counts
                 ·gc.time:                         31.000 ms


# Run progress: 97.22% complete, ETA 00:00:52
# Fork: 3 of 3
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access using Lookup on eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher (file:/home/kabutz/performance/dynamic-proxies-samples/core/target/classes/) to class java.lang.reflect.Method
WARNING: Please consider reporting this to the maintainers of eu.javaspecialists.books.dynamicproxies.util.ParameterTypesFetcher$FastParameterFetcher
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
42.634 ns/op
# Warmup Iteration   2: 37.797 ns/op
# Warmup Iteration   3: 36.706 ns/op
# Warmup Iteration   4: 38.190 ns/op
# Warmup Iteration   5: 38.094 ns/op
Iteration   1: 38.203 ns/op
                 ·gc.alloc.rate:                   1369.554 MB/sec
                 ·gc.alloc.rate.norm:              64.023 B/op
                 ·gc.churn.PS_Eden_Space:          1377.546 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.396 B/op
                 ·gc.churn.PS_Survivor_Space:      0.259 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        76.000 counts
                 ·gc.time:                         30.000 ms

Iteration   2: 37.390 ns/op
                 ·gc.alloc.rate:                   1399.213 MB/sec
                 ·gc.alloc.rate.norm:              64.021 B/op
                 ·gc.churn.PS_Eden_Space:          1393.391 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.754 B/op
                 ·gc.churn.PS_Survivor_Space:      0.205 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
                 ·gc.count:                        71.000 counts
                 ·gc.time:                         30.000 ms

Iteration   3: 37.627 ns/op
                 ·gc.alloc.rate:                   1390.398 MB/sec
                 ·gc.alloc.rate.norm:              64.020 B/op
                 ·gc.churn.PS_Eden_Space:          1395.157 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.239 B/op
                 ·gc.churn.PS_Survivor_Space:      0.196 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
                 ·gc.count:                        69.000 counts
                 ·gc.time:                         30.000 ms

Iteration   4: 37.545 ns/op
                 ·gc.alloc.rate:                   1393.534 MB/sec
                 ·gc.alloc.rate.norm:              64.021 B/op
                 ·gc.churn.PS_Eden_Space:          1394.230 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.053 B/op
                 ·gc.churn.PS_Survivor_Space:      0.241 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
                 ·gc.count:                        73.000 counts
                 ·gc.time:                         29.000 ms

Iteration   5: 37.440 ns/op
                 ·gc.alloc.rate:                   1397.393 MB/sec
                 ·gc.alloc.rate.norm:              64.021 B/op
                 ·gc.churn.PS_Eden_Space:          1400.505 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.164 B/op
                 ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
                 ·gc.count:                        73.000 counts
                 ·gc.time:                         30.000 ms

Iteration   6: 37.422 ns/op
                 ·gc.alloc.rate:                   1398.157 MB/sec
                 ·gc.alloc.rate.norm:              64.021 B/op
                 ·gc.churn.PS_Eden_Space:          1395.528 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.901 B/op
                 ·gc.churn.PS_Survivor_Space:      0.179 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
                 ·gc.count:                        73.000 counts
                 ·gc.time:                         29.000 ms

Iteration   7: 37.068 ns/op
                 ·gc.alloc.rate:                   1411.512 MB/sec
                 ·gc.alloc.rate.norm:              64.021 B/op
                 ·gc.churn.PS_Eden_Space:          1405.664 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.756 B/op
                 ·gc.churn.PS_Survivor_Space:      0.268 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
                 ·gc.count:                        74.000 counts
                 ·gc.time:                         29.000 ms

Iteration   8: 37.859 ns/op
                 ·gc.alloc.rate:                   1382.031 MB/sec
                 ·gc.alloc.rate.norm:              64.021 B/op
                 ·gc.churn.PS_Eden_Space:          1386.527 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.230 B/op
                 ·gc.churn.PS_Survivor_Space:      0.179 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
                 ·gc.count:                        73.000 counts
                 ·gc.time:                         31.000 ms

Iteration   9: 37.805 ns/op
                 ·gc.alloc.rate:                   1383.938 MB/sec
                 ·gc.alloc.rate.norm:              64.020 B/op
                 ·gc.churn.PS_Eden_Space:          1375.974 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     63.651 B/op
                 ·gc.churn.PS_Survivor_Space:      0.223 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
                 ·gc.count:                        68.000 counts
                 ·gc.time:                         30.000 ms

Iteration  10: 37.656 ns/op
                 ·gc.alloc.rate:                   1389.399 MB/sec
                 ·gc.alloc.rate.norm:              64.020 B/op
                 ·gc.churn.PS_Eden_Space:          1402.665 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     64.632 B/op
                 ·gc.churn.PS_Survivor_Space:      0.223 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
                 ·gc.count:                        70.000 counts
                 ·gc.time:                         29.000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray":
  37.726 ±(99.9%) 0.779 ns/op [Average]
  (min, avg, max) = (35.444, 37.726, 39.820), stdev = 1.166
  CI (99.9%): [36.947, 38.506] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.alloc.rate":
  1388.112 ±(99.9%) 28.610 MB/sec [Average]
  (min, avg, max) = (1313.927, 1388.112, 1475.990), stdev = 42.822
  CI (99.9%): [1359.502, 1416.722] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.alloc.rate.norm":
  64.021 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (64.013, 64.021, 64.024), stdev = 0.002
  CI (99.9%): [64.020, 64.022] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.churn.PS_Eden_Space":
  1388.889 ±(99.9%) 28.907 MB/sec [Average]
  (min, avg, max) = (1320.105, 1388.889, 1490.172), stdev = 43.266
  CI (99.9%): [1359.982, 1417.796] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.churn.PS_Eden_Space.norm":
  64.058 ±(99.9%) 0.246 B/op [Average]
  (min, avg, max) = (63.221, 64.058, 64.632), stdev = 0.368
  CI (99.9%): [63.812, 64.304] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.churn.PS_Survivor_Space":
  0.241 ±(99.9%) 0.033 MB/sec [Average]
  (min, avg, max) = (0.116, 0.241, 0.357), stdev = 0.049
  CI (99.9%): [0.208, 0.274] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.churn.PS_Survivor_Space.norm":
  0.011 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (0.005, 0.011, 0.017), stdev = 0.002
  CI (99.9%): [0.010, 0.013] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.count":
  2179.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (49.000, 72.633, 78.000), stdev = 5.156
  CI (99.9%): [2179.000, 2179.000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch05.benchmarks.AdapterBenchmark.plainToArray:·gc.time":
  883.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (19.000, 29.433, 33.000), stdev = 2.192
  CI (99.9%): [883.000, 883.000] (assumes normal distribution)


# Run complete. Total time: 00:31:46

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt     Score    Error   Units
AdapterBenchmark.classAdapterForEach                                           avgt   30    19.496 ±  0.037   ns/op
AdapterBenchmark.classAdapterForEach:·gc.alloc.rate                            avgt   30    ≈ 10⁻⁴           MB/sec
AdapterBenchmark.classAdapterForEach:·gc.alloc.rate.norm                       avgt   30    ≈ 10⁻⁶             B/op
AdapterBenchmark.classAdapterForEach:·gc.count                                 avgt   30       ≈ 0           counts
AdapterBenchmark.classAdapterSize                                              avgt   30     8.050 ±  0.031   ns/op
AdapterBenchmark.classAdapterSize:·gc.alloc.rate                               avgt   30    ≈ 10⁻⁴           MB/sec
AdapterBenchmark.classAdapterSize:·gc.alloc.rate.norm                          avgt   30    ≈ 10⁻⁶             B/op
AdapterBenchmark.classAdapterSize:·gc.count                                    avgt   30       ≈ 0           counts
AdapterBenchmark.classAdapterToArray                                           avgt   30    41.542 ±  0.220   ns/op
AdapterBenchmark.classAdapterToArray:·gc.alloc.rate                            avgt   30  1259.604 ±  6.765  MB/sec
AdapterBenchmark.classAdapterToArray:·gc.alloc.rate.norm                       avgt   30    64.024 ±  0.001    B/op
AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Eden_Space                   avgt   30  1261.085 ±  8.614  MB/sec
AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Eden_Space.norm              avgt   30    64.099 ±  0.232    B/op
AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Survivor_Space               avgt   30     0.258 ±  0.029  MB/sec
AdapterBenchmark.classAdapterToArray:·gc.churn.PS_Survivor_Space.norm          avgt   30     0.013 ±  0.002    B/op
AdapterBenchmark.classAdapterToArray:·gc.count                                 avgt   30  2244.000           counts
AdapterBenchmark.classAdapterToArray:·gc.time                                  avgt   30   892.000               ms
AdapterBenchmark.dynamicObjectAdapterForEach                                   avgt   30    41.208 ±  0.423   ns/op
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.alloc.rate                    avgt   30   476.489 ±  4.822  MB/sec
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.alloc.rate.norm               avgt   30    24.021 ±  0.003    B/op
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Eden_Space           avgt   30   477.912 ±  4.606  MB/sec
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Eden_Space.norm      avgt   30    24.094 ±  0.145    B/op
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Survivor_Space       avgt   30     0.015 ±  0.011  MB/sec
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.churn.PS_Survivor_Space.norm  avgt   30     0.001 ±  0.001    B/op
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.count                         avgt   30  1951.000           counts
AdapterBenchmark.dynamicObjectAdapterForEach:·gc.time                          avgt   30   769.000               ms
AdapterBenchmark.dynamicObjectAdapterSize                                      avgt   30    26.857 ±  0.384   ns/op
AdapterBenchmark.dynamicObjectAdapterSize:·gc.alloc.rate                       avgt   30    ≈ 10⁻⁴           MB/sec
AdapterBenchmark.dynamicObjectAdapterSize:·gc.alloc.rate.norm                  avgt   30    ≈ 10⁻⁵             B/op
AdapterBenchmark.dynamicObjectAdapterSize:·gc.count                            avgt   30       ≈ 0           counts
AdapterBenchmark.dynamicObjectAdapterToArray                                   avgt   30    56.262 ±  1.324   ns/op
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.alloc.rate                    avgt   30   931.193 ± 21.397  MB/sec
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.alloc.rate.norm               avgt   30    64.032 ±  0.002    B/op
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Eden_Space           avgt   30   932.037 ± 21.449  MB/sec
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Eden_Space.norm      avgt   30    64.091 ±  0.271    B/op
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Survivor_Space       avgt   30     0.228 ±  0.028  MB/sec
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.churn.PS_Survivor_Space.norm  avgt   30     0.016 ±  0.002    B/op
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.count                         avgt   30  2204.000           counts
AdapterBenchmark.dynamicObjectAdapterToArray:·gc.time                          avgt   30   880.000               ms
AdapterBenchmark.objectAdapterForEach                                          avgt   30    21.359 ±  0.075   ns/op
AdapterBenchmark.objectAdapterForEach:·gc.alloc.rate                           avgt   30    ≈ 10⁻⁴           MB/sec
AdapterBenchmark.objectAdapterForEach:·gc.alloc.rate.norm                      avgt   30    ≈ 10⁻⁶             B/op
AdapterBenchmark.objectAdapterForEach:·gc.count                                avgt   30       ≈ 0           counts
AdapterBenchmark.objectAdapterSize                                             avgt   30     9.327 ±  0.092   ns/op
AdapterBenchmark.objectAdapterSize:·gc.alloc.rate                              avgt   30    ≈ 10⁻⁴           MB/sec
AdapterBenchmark.objectAdapterSize:·gc.alloc.rate.norm                         avgt   30    ≈ 10⁻⁶             B/op
AdapterBenchmark.objectAdapterSize:·gc.count                                   avgt   30       ≈ 0           counts
AdapterBenchmark.objectAdapterToArray                                          avgt   30    43.097 ±  0.228   ns/op
AdapterBenchmark.objectAdapterToArray:·gc.alloc.rate                           avgt   30  1214.162 ±  6.418  MB/sec
AdapterBenchmark.objectAdapterToArray:·gc.alloc.rate.norm                      avgt   30    64.025 ±  0.001    B/op
AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Eden_Space                  avgt   30  1214.972 ±  8.388  MB/sec
AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Eden_Space.norm             avgt   30    64.067 ±  0.249    B/op
AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Survivor_Space              avgt   30     0.241 ±  0.027  MB/sec
AdapterBenchmark.objectAdapterToArray:·gc.churn.PS_Survivor_Space.norm         avgt   30     0.013 ±  0.001    B/op
AdapterBenchmark.objectAdapterToArray:·gc.count                                avgt   30  2225.000           counts
AdapterBenchmark.objectAdapterToArray:·gc.time                                 avgt   30   895.000               ms
AdapterBenchmark.plainForEach                                                  avgt   30    19.496 ±  0.028   ns/op
AdapterBenchmark.plainForEach:·gc.alloc.rate                                   avgt   30    ≈ 10⁻⁴           MB/sec
AdapterBenchmark.plainForEach:·gc.alloc.rate.norm                              avgt   30    ≈ 10⁻⁶             B/op
AdapterBenchmark.plainForEach:·gc.count                                        avgt   30       ≈ 0           counts
AdapterBenchmark.plainSize                                                     avgt   30     8.046 ±  0.034   ns/op
AdapterBenchmark.plainSize:·gc.alloc.rate                                      avgt   30    ≈ 10⁻⁴           MB/sec
AdapterBenchmark.plainSize:·gc.alloc.rate.norm                                 avgt   30    ≈ 10⁻⁶             B/op
AdapterBenchmark.plainSize:·gc.count                                           avgt   30       ≈ 0           counts
AdapterBenchmark.plainToArray                                                  avgt   30    37.726 ±  0.779   ns/op
AdapterBenchmark.plainToArray:·gc.alloc.rate                                   avgt   30  1388.112 ± 28.610  MB/sec
AdapterBenchmark.plainToArray:·gc.alloc.rate.norm                              avgt   30    64.021 ±  0.001    B/op
AdapterBenchmark.plainToArray:·gc.churn.PS_Eden_Space                          avgt   30  1388.889 ± 28.907  MB/sec
AdapterBenchmark.plainToArray:·gc.churn.PS_Eden_Space.norm                     avgt   30    64.058 ±  0.246    B/op
AdapterBenchmark.plainToArray:·gc.churn.PS_Survivor_Space                      avgt   30     0.241 ±  0.033  MB/sec
AdapterBenchmark.plainToArray:·gc.churn.PS_Survivor_Space.norm                 avgt   30     0.011 ±  0.002    B/op
AdapterBenchmark.plainToArray:·gc.count                                        avgt   30  2179.000           counts
AdapterBenchmark.plainToArray:·gc.time                                         avgt   30   883.000               ms
