# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU

# Run progress: 0,00% complete, ETA 00:00:48
# Fork: 1 of 1
# Warmup Iteration   1: 4,105 ns/op
# Warmup Iteration   2: 3,798 ns/op
# Warmup Iteration   3: 3,196 ns/op
Iteration   1: 3,187 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,238 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,177 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU":
  3,201 ±(99.9%) 0,602 ns/op [Average]
  (min, avg, max) = (3,177, 3,201, 3,238), stdev = 0,033
  CI (99.9%): [2,598, 3,803] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement

# Run progress: 12,50% complete, ETA 00:01:05
# Fork: 1 of 1
# Warmup Iteration   1: 2,398 ns/op
# Warmup Iteration   2: 2,460 ns/op
# Warmup Iteration   3: 1,919 ns/op
Iteration   1: 1,935 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1,953 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1,953 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement":
  1,947 ±(99.9%) 0,191 ns/op [Average]
  (min, avg, max) = (1,935, 1,947, 1,953), stdev = 0,010
  CI (99.9%): [1,756, 2,138] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU

# Run progress: 25,00% complete, ETA 00:00:56
# Fork: 1 of 1
# Warmup Iteration   1: 5,664 ns/op
# Warmup Iteration   2: 5,736 ns/op
# Warmup Iteration   3: 4,734 ns/op
Iteration   1: 4,632 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 4,660 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 4,736 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU":
  4,676 ±(99.9%) 0,983 ns/op [Average]
  (min, avg, max) = (4,632, 4,676, 4,736), stdev = 0,054
  CI (99.9%): [3,693, 5,659] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement

# Run progress: 37,50% complete, ETA 00:00:46
# Fork: 1 of 1
# Warmup Iteration   1: 7,665 ns/op
# Warmup Iteration   2: 6,008 ns/op
# Warmup Iteration   3: 5,178 ns/op
Iteration   1: 5,163 ns/op
                 ·gc.alloc.rate:                   2944,916 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          3178,008 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     25,900 B/op
                 ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        8,000 counts
                 ·gc.time:                         4,000 ms

Iteration   2: 5,169 ns/op
                 ·gc.alloc.rate:                   2943,015 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          2992,855 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,406 B/op
                 ·gc.churn.PS_Survivor_Space:      0,124 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        11,000 counts
                 ·gc.time:                         5,000 ms

Iteration   3: 5,187 ns/op
                 ·gc.alloc.rate:                   2938,715 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          2832,956 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,136 B/op
                 ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        17,000 counts
                 ·gc.time:                         8,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement":
  5,173 ±(99.9%) 0,225 ns/op [Average]
  (min, avg, max) = (5,163, 5,173, 5,187), stdev = 0,012
  CI (99.9%): [4,948, 5,398] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate":
  2942,215 ±(99.9%) 57,960 MB/sec [Average]
  (min, avg, max) = (2938,715, 2942,215, 2944,916), stdev = 3,177
  CI (99.9%): [2884,256, 3000,175] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate.norm":
  24,000 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (24,000, 24,000, 24,000), stdev = 0,001
  CI (99.9%): [24,000, 24,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Eden_Space":
  3001,273 ±(99.9%) 3150,327 MB/sec [Average]
  (min, avg, max) = (2832,956, 3001,273, 3178,008), stdev = 172,680
  CI (99.9%): [≈ 0, 6151,600] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Eden_Space.norm":
  24,481 ±(99.9%) 25,234 B/op [Average]
  (min, avg, max) = (23,136, 24,481, 25,900), stdev = 1,383
  CI (99.9%): [≈ 0, 49,715] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Survivor_Space":
  0,131 ±(99.9%) 0,953 MB/sec [Average]
  (min, avg, max) = (0,083, 0,131, 0,187), stdev = 0,052
  CI (99.9%): [≈ 0, 1,085] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Survivor_Space.norm":
  0,001 ±(99.9%) 0,008 B/op [Average]
  (min, avg, max) = (0,001, 0,001, 0,002), stdev = 0,001
  CI (99.9%): [≈ 0, 0,009] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.count":
  36,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (8,000, 12,000, 17,000), stdev = 4,583
  CI (99.9%): [36,000, 36,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.time":
  17,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (4,000, 5,667, 8,000), stdev = 2,082
  CI (99.9%): [17,000, 17,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU

# Run progress: 50,00% complete, ETA 00:00:37
# Fork: 1 of 1
# Warmup Iteration   1: 5,309 ns/op
# Warmup Iteration   2: 5,300 ns/op
# Warmup Iteration   3: 5,265 ns/op
Iteration   1: 5,221 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5,194 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5,251 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU":
  5,222 ±(99.9%) 0,522 ns/op [Average]
  (min, avg, max) = (5,194, 5,222, 5,251), stdev = 0,029
  CI (99.9%): [4,700, 5,744] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement

# Run progress: 62,50% complete, ETA 00:00:28
# Fork: 1 of 1
# Warmup Iteration   1: 9,026 ns/op
# Warmup Iteration   2: 9,702 ns/op
# Warmup Iteration   3: 7,298 ns/op
Iteration   1: 7,434 ns/op
                 ·gc.alloc.rate:                   2046,334 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          2398,430 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     28,129 B/op
                 ·gc.churn.PS_Survivor_Space:      0,166 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        5,000 counts
                 ·gc.time:                         3,000 ms

Iteration   2: 7,245 ns/op
                 ·gc.alloc.rate:                   2099,621 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          1936,922 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     22,140 B/op
                 ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        5,000 counts
                 ·gc.time:                         2,000 ms

Iteration   3: 7,322 ns/op
                 ·gc.alloc.rate:                   2078,237 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          2131,435 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,614 B/op
                 ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        7,000 counts
                 ·gc.time:                         4,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement":
  7,334 ±(99.9%) 1,735 ns/op [Average]
  (min, avg, max) = (7,245, 7,334, 7,434), stdev = 0,095
  CI (99.9%): [5,599, 9,068] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate":
  2074,731 ±(99.9%) 489,222 MB/sec [Average]
  (min, avg, max) = (2046,334, 2074,731, 2099,621), stdev = 26,816
  CI (99.9%): [1585,509, 2563,953] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate.norm":
  24,000 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (24,000, 24,000, 24,000), stdev = 0,001
  CI (99.9%): [24,000, 24,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space":
  2155,596 ±(99.9%) 4227,087 MB/sec [Average]
  (min, avg, max) = (1936,922, 2155,596, 2398,430), stdev = 231,701
  CI (99.9%): [≈ 0, 6382,682] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space.norm":
  24,961 ±(99.9%) 54,907 B/op [Average]
  (min, avg, max) = (22,140, 24,961, 28,129), stdev = 3,010
  CI (99.9%): [≈ 0, 79,869] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space":
  0,097 ±(99.9%) 1,093 MB/sec [Average]
  (min, avg, max) = (0,062, 0,097, 0,166), stdev = 0,060
  CI (99.9%): [≈ 0, 1,190] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space.norm":
  0,001 ±(99.9%) 0,013 B/op [Average]
  (min, avg, max) = (0,001, 0,001, 0,002), stdev = 0,001
  CI (99.9%): [≈ 0, 0,014] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.count":
  17,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (5,000, 5,667, 7,000), stdev = 1,155
  CI (99.9%): [17,000, 17,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.time":
  9,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (2,000, 3,000, 4,000), stdev = 1,000
  CI (99.9%): [9,000, 9,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU

# Run progress: 75,00% complete, ETA 00:00:18
# Fork: 1 of 1
# Warmup Iteration   1: 3,583 ns/op
# Warmup Iteration   2: 3,831 ns/op
# Warmup Iteration   3: 3,656 ns/op
Iteration   1: 3,718 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,643 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,627 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU":
  3,663 ±(99.9%) 0,889 ns/op [Average]
  (min, avg, max) = (3,627, 3,663, 3,718), stdev = 0,049
  CI (99.9%): [2,774, 4,552] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement

# Run progress: 87,50% complete, ETA 00:00:09
# Fork: 1 of 1
# Warmup Iteration   1: 2,701 ns/op
# Warmup Iteration   2: 2,556 ns/op
# Warmup Iteration   3: 2,278 ns/op
Iteration   1: 2,304 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2,266 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2,268 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement":
  2,279 ±(99.9%) 0,383 ns/op [Average]
  (min, avg, max) = (2,266, 2,279, 2,304), stdev = 0,021
  CI (99.9%): [1,896, 2,663] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:01:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt     Score      Error   Units
MethodCallBenchmark.directCallConsumeCPU                                                  avgt    3     3,201 ±    0,602   ns/op
MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate                                   avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate.norm                              avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.directCallConsumeCPU:·gc.count                                        avgt    3       ≈ 0             counts
MethodCallBenchmark.directCallIncrement                                                   avgt    3     1,947 ±    0,191   ns/op
MethodCallBenchmark.directCallIncrement:·gc.alloc.rate                                    avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.directCallIncrement:·gc.alloc.rate.norm                               avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.directCallIncrement:·gc.count                                         avgt    3       ≈ 0             counts
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU                                      avgt    3     4,676 ±    0,983   ns/op
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate                       avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate.norm                  avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.count                            avgt    3       ≈ 0             counts
MethodCallBenchmark.dynamicProxyDirectCallIncrement                                       avgt    3     5,173 ±    0,225   ns/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate                        avgt    3  2942,215 ±   57,960  MB/sec
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate.norm                   avgt    3    24,000 ±    0,001    B/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Eden_Space               avgt    3  3001,273 ± 3150,327  MB/sec
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Eden_Space.norm          avgt    3    24,481 ±   25,234    B/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Survivor_Space           avgt    3     0,131 ±    0,953  MB/sec
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Survivor_Space.norm      avgt    3     0,001 ±    0,008    B/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.count                             avgt    3    36,000             counts
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.time                              avgt    3    17,000                 ms
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU                                  avgt    3     5,222 ±    0,522   ns/op
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate                   avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate.norm              avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.count                        avgt    3       ≈ 0             counts
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement                                   avgt    3     7,334 ±    1,735   ns/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate                    avgt    3  2074,731 ±  489,222  MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate.norm               avgt    3    24,000 ±    0,001    B/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space           avgt    3  2155,596 ± 4227,087  MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space.norm      avgt    3    24,961 ±   54,907    B/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space       avgt    3     0,097 ±    1,093  MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space.norm  avgt    3     0,001 ±    0,013    B/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.count                         avgt    3    17,000             counts
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.time                          avgt    3     9,000                 ms
MethodCallBenchmark.staticProxyConsumeCPU                                                 avgt    3     3,663 ±    0,889   ns/op
MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate                                  avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate.norm                             avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.staticProxyConsumeCPU:·gc.count                                       avgt    3       ≈ 0             counts
MethodCallBenchmark.staticProxyIncrement                                                  avgt    3     2,279 ±    0,383   ns/op
MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate                                   avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate.norm                              avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.staticProxyIncrement:·gc.count                                        avgt    3       ≈ 0             counts
# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU

# Run progress: 0,00% complete, ETA 00:00:48
# Fork: 1 of 1
# Warmup Iteration   1: 4,119 ns/op
# Warmup Iteration   2: 3,788 ns/op
# Warmup Iteration   3: 3,181 ns/op
Iteration   1: 3,187 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,148 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,157 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU":
  3,164 ±(99.9%) 0,370 ns/op [Average]
  (min, avg, max) = (3,148, 3,164, 3,187), stdev = 0,020
  CI (99.9%): [2,794, 3,534] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement

# Run progress: 12,50% complete, ETA 00:01:05
# Fork: 1 of 1
# Warmup Iteration   1: 2,365 ns/op
# Warmup Iteration   2: 2,393 ns/op
# Warmup Iteration   3: 1,864 ns/op
Iteration   1: 1,876 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1,881 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1,853 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement":
  1,870 ±(99.9%) 0,269 ns/op [Average]
  (min, avg, max) = (1,853, 1,870, 1,881), stdev = 0,015
  CI (99.9%): [1,601, 2,139] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU

# Run progress: 25,00% complete, ETA 00:00:56
# Fork: 1 of 1
# Warmup Iteration   1: 5,605 ns/op
# Warmup Iteration   2: 5,670 ns/op
# Warmup Iteration   3: 4,275 ns/op
Iteration   1: 4,295 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 4,378 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 4,331 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU":
  4,335 ±(99.9%) 0,760 ns/op [Average]
  (min, avg, max) = (4,295, 4,335, 4,378), stdev = 0,042
  CI (99.9%): [3,575, 5,094] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement

# Run progress: 37,50% complete, ETA 00:00:46
# Fork: 1 of 1
# Warmup Iteration   1: 7,719 ns/op
# Warmup Iteration   2: 7,586 ns/op
# Warmup Iteration   3: 5,117 ns/op
Iteration   1: 5,114 ns/op
                 ·gc.alloc.rate:                   2986,013 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          2594,529 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     20,853 B/op
                 ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        3,000 counts
                 ·gc.time:                         2,000 ms

Iteration   2: 5,128 ns/op
                 ·gc.alloc.rate:                   2976,372 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          2941,758 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,721 B/op
                 ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        4,000 counts
                 ·gc.time:                         2,000 ms

Iteration   3: 5,155 ns/op
                 ·gc.alloc.rate:                   2952,501 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          3522,791 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     28,636 B/op
                 ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        6,000 counts
                 ·gc.time:                         2,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement":
  5,132 ±(99.9%) 0,377 ns/op [Average]
  (min, avg, max) = (5,114, 5,132, 5,155), stdev = 0,021
  CI (99.9%): [4,756, 5,509] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate":
  2971,629 ±(99.9%) 314,741 MB/sec [Average]
  (min, avg, max) = (2952,501, 2971,629, 2986,013), stdev = 17,252
  CI (99.9%): [2656,887, 3286,370] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate.norm":
  24,000 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (24,000, 24,000, 24,000), stdev = 0,001
  CI (99.9%): [24,000, 24,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Eden_Space":
  3019,692 ±(99.9%) 8556,536 MB/sec [Average]
  (min, avg, max) = (2594,529, 3019,692, 3522,791), stdev = 469,013
  CI (99.9%): [≈ 0, 11576,228] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Eden_Space.norm":
  24,403 ±(99.9%) 71,803 B/op [Average]
  (min, avg, max) = (20,853, 24,403, 28,636), stdev = 3,936
  CI (99.9%): [≈ 0, 96,206] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Survivor_Space":
  0,048 ±(99.9%) 0,578 MB/sec [Average]
  (min, avg, max) = (0,021, 0,048, 0,083), stdev = 0,032
  CI (99.9%): [≈ 0, 0,626] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Survivor_Space.norm":
  ≈ 10⁻³ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.count":
  13,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (3,000, 4,333, 6,000), stdev = 1,528
  CI (99.9%): [13,000, 13,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.time":
  6,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
  CI (99.9%): [6,000, 6,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU

# Run progress: 50,00% complete, ETA 00:00:37
# Fork: 1 of 1
# Warmup Iteration   1: 5,151 ns/op
# Warmup Iteration   2: 5,252 ns/op
# Warmup Iteration   3: 5,226 ns/op
Iteration   1: 5,185 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5,190 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5,187 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU":
  5,187 ±(99.9%) 0,048 ns/op [Average]
  (min, avg, max) = (5,185, 5,187, 5,190), stdev = 0,003
  CI (99.9%): [5,140, 5,235] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement

# Run progress: 62,50% complete, ETA 00:00:28
# Fork: 1 of 1
# Warmup Iteration   1: 8,918 ns/op
# Warmup Iteration   2: 9,397 ns/op
# Warmup Iteration   3: 7,225 ns/op
Iteration   1: 7,294 ns/op
                 ·gc.alloc.rate:                   2087,399 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          2393,120 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     27,515 B/op
                 ·gc.churn.PS_Survivor_Space:      0,124 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        5,000 counts
                 ·gc.time:                         2,000 ms

Iteration   2: 7,230 ns/op
                 ·gc.alloc.rate:                   2105,597 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          1933,692 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     22,041 B/op
                 ·gc.churn.PS_Survivor_Space:      0,145 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        5,000 counts
                 ·gc.time:                         2,000 ms

Iteration   3: 7,287 ns/op
                 ·gc.alloc.rate:                   2085,852 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          2392,063 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     27,523 B/op
                 ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        8,000 counts
                 ·gc.time:                         4,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement":
  7,270 ±(99.9%) 0,645 ns/op [Average]
  (min, avg, max) = (7,230, 7,270, 7,294), stdev = 0,035
  CI (99.9%): [6,626, 7,915] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate":
  2092,949 ±(99.9%) 200,322 MB/sec [Average]
  (min, avg, max) = (2085,852, 2092,949, 2105,597), stdev = 10,980
  CI (99.9%): [1892,628, 2293,271] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate.norm":
  24,000 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (24,000, 24,000, 24,000), stdev = 0,001
  CI (99.9%): [24,000, 24,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space":
  2239,625 ±(99.9%) 4833,607 MB/sec [Average]
  (min, avg, max) = (1933,692, 2239,625, 2393,120), stdev = 264,946
  CI (99.9%): [≈ 0, 7073,231] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space.norm":
  25,693 ±(99.9%) 57,706 B/op [Average]
  (min, avg, max) = (22,041, 25,693, 27,523), stdev = 3,163
  CI (99.9%): [≈ 0, 83,399] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space":
  0,110 ±(99.9%) 0,784 MB/sec [Average]
  (min, avg, max) = (0,062, 0,110, 0,145), stdev = 0,043
  CI (99.9%): [≈ 0, 0,894] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space.norm":
  0,001 ±(99.9%) 0,009 B/op [Average]
  (min, avg, max) = (0,001, 0,001, 0,002), stdev = 0,001
  CI (99.9%): [≈ 0, 0,010] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.count":
  18,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (5,000, 6,000, 8,000), stdev = 1,732
  CI (99.9%): [18,000, 18,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.time":
  8,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (2,000, 2,667, 4,000), stdev = 1,155
  CI (99.9%): [8,000, 8,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU

# Run progress: 75,00% complete, ETA 00:00:18
# Fork: 1 of 1
# Warmup Iteration   1: 3,601 ns/op
# Warmup Iteration   2: 3,844 ns/op
# Warmup Iteration   3: 3,651 ns/op
Iteration   1: 3,643 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,647 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,592 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU":
  3,627 ±(99.9%) 0,560 ns/op [Average]
  (min, avg, max) = (3,592, 3,627, 3,647), stdev = 0,031
  CI (99.9%): [3,067, 4,187] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement

# Run progress: 87,50% complete, ETA 00:00:09
# Fork: 1 of 1
# Warmup Iteration   1: 2,647 ns/op
# Warmup Iteration   2: 2,554 ns/op
# Warmup Iteration   3: 2,258 ns/op
Iteration   1: 2,268 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2,266 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2,272 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement":
  2,268 ±(99.9%) 0,060 ns/op [Average]
  (min, avg, max) = (2,266, 2,268, 2,272), stdev = 0,003
  CI (99.9%): [2,208, 2,329] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:01:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt     Score      Error   Units
MethodCallBenchmark.directCallConsumeCPU                                                  avgt    3     3,164 ±    0,370   ns/op
MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate                                   avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate.norm                              avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.directCallConsumeCPU:·gc.count                                        avgt    3       ≈ 0             counts
MethodCallBenchmark.directCallIncrement                                                   avgt    3     1,870 ±    0,269   ns/op
MethodCallBenchmark.directCallIncrement:·gc.alloc.rate                                    avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.directCallIncrement:·gc.alloc.rate.norm                               avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.directCallIncrement:·gc.count                                         avgt    3       ≈ 0             counts
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU                                      avgt    3     4,335 ±    0,760   ns/op
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate                       avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate.norm                  avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.count                            avgt    3       ≈ 0             counts
MethodCallBenchmark.dynamicProxyDirectCallIncrement                                       avgt    3     5,132 ±    0,377   ns/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate                        avgt    3  2971,629 ±  314,741  MB/sec
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate.norm                   avgt    3    24,000 ±    0,001    B/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Eden_Space               avgt    3  3019,692 ± 8556,536  MB/sec
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Eden_Space.norm          avgt    3    24,403 ±   71,803    B/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Survivor_Space           avgt    3     0,048 ±    0,578  MB/sec
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Survivor_Space.norm      avgt    3    ≈ 10⁻³               B/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.count                             avgt    3    13,000             counts
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.time                              avgt    3     6,000                 ms
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU                                  avgt    3     5,187 ±    0,048   ns/op
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate                   avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate.norm              avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.count                        avgt    3       ≈ 0             counts
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement                                   avgt    3     7,270 ±    0,645   ns/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate                    avgt    3  2092,949 ±  200,322  MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate.norm               avgt    3    24,000 ±    0,001    B/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space           avgt    3  2239,625 ± 4833,607  MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space.norm      avgt    3    25,693 ±   57,706    B/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space       avgt    3     0,110 ±    0,784  MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space.norm  avgt    3     0,001 ±    0,009    B/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.count                         avgt    3    18,000             counts
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.time                          avgt    3     8,000                 ms
MethodCallBenchmark.staticProxyConsumeCPU                                                 avgt    3     3,627 ±    0,560   ns/op
MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate                                  avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate.norm                             avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.staticProxyConsumeCPU:·gc.count                                       avgt    3       ≈ 0             counts
MethodCallBenchmark.staticProxyIncrement                                                  avgt    3     2,268 ±    0,060   ns/op
MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate                                   avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate.norm                              avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.staticProxyIncrement:·gc.count                                        avgt    3       ≈ 0             counts
# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU

# Run progress: 0,00% complete, ETA 00:00:48
# Fork: 1 of 1
# Warmup Iteration   1: 4,067 ns/op
# Warmup Iteration   2: 3,612 ns/op
# Warmup Iteration   3: 3,146 ns/op
Iteration   1: 3,165 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,151 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,160 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU":
  3,159 ±(99.9%) 0,126 ns/op [Average]
  (min, avg, max) = (3,151, 3,159, 3,165), stdev = 0,007
  CI (99.9%): [3,033, 3,285] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement

# Run progress: 12,50% complete, ETA 00:01:05
# Fork: 1 of 1
# Warmup Iteration   1: 2,364 ns/op
# Warmup Iteration   2: 2,388 ns/op
# Warmup Iteration   3: 1,877 ns/op
Iteration   1: 1,856 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1,930 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1,863 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement":
  1,883 ±(99.9%) 0,747 ns/op [Average]
  (min, avg, max) = (1,856, 1,883, 1,930), stdev = 0,041
  CI (99.9%): [1,136, 2,629] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU

# Run progress: 25,00% complete, ETA 00:00:56
# Fork: 1 of 1
# Warmup Iteration   1: 5,555 ns/op
# Warmup Iteration   2: 5,686 ns/op
# Warmup Iteration   3: 4,273 ns/op
Iteration   1: 4,301 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 4,317 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 4,300 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU":
  4,306 ±(99.9%) 0,175 ns/op [Average]
  (min, avg, max) = (4,300, 4,306, 4,317), stdev = 0,010
  CI (99.9%): [4,131, 4,481] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement

# Run progress: 37,50% complete, ETA 00:00:46
# Fork: 1 of 1
# Warmup Iteration   1: 7,675 ns/op
# Warmup Iteration   2: 5,996 ns/op
# Warmup Iteration   3: 5,118 ns/op
Iteration   1: 5,144 ns/op
                 ·gc.alloc.rate:                   2963,406 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          3178,244 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     25,740 B/op
                 ·gc.churn.PS_Survivor_Space:      0,166 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        8,000 counts
                 ·gc.time:                         3,000 ms

Iteration   2: 5,146 ns/op
                 ·gc.alloc.rate:                   2959,894 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          3000,671 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     24,331 B/op
                 ·gc.churn.PS_Survivor_Space:      0,228 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
                 ·gc.count:                        11,000 counts
                 ·gc.time:                         5,000 ms

Iteration   3: 5,189 ns/op
                 ·gc.alloc.rate:                   2937,990 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          2872,143 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,462 B/op
                 ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        17,000 counts
                 ·gc.time:                         8,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement":
  5,160 ±(99.9%) 0,461 ns/op [Average]
  (min, avg, max) = (5,144, 5,160, 5,189), stdev = 0,025
  CI (99.9%): [4,699, 5,620] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate":
  2953,763 ±(99.9%) 251,258 MB/sec [Average]
  (min, avg, max) = (2937,990, 2953,763, 2963,406), stdev = 13,772
  CI (99.9%): [2702,505, 3205,022] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate.norm":
  24,000 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (24,000, 24,000, 24,000), stdev = 0,001
  CI (99.9%): [24,000, 24,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Eden_Space":
  3017,019 ±(99.9%) 2804,134 MB/sec [Average]
  (min, avg, max) = (2872,143, 3017,019, 3178,244), stdev = 153,704
  CI (99.9%): [212,886, 5821,153] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Eden_Space.norm":
  24,511 ±(99.9%) 20,972 B/op [Average]
  (min, avg, max) = (23,462, 24,511, 25,740), stdev = 1,150
  CI (99.9%): [3,539, 45,483] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Survivor_Space":
  0,152 ±(99.9%) 1,531 MB/sec [Average]
  (min, avg, max) = (0,062, 0,152, 0,228), stdev = 0,084
  CI (99.9%): [≈ 0, 1,684] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Survivor_Space.norm":
  0,001 ±(99.9%) 0,012 B/op [Average]
  (min, avg, max) = (0,001, 0,001, 0,002), stdev = 0,001
  CI (99.9%): [≈ 0, 0,014] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.count":
  36,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (8,000, 12,000, 17,000), stdev = 4,583
  CI (99.9%): [36,000, 36,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.time":
  16,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (3,000, 5,333, 8,000), stdev = 2,517
  CI (99.9%): [16,000, 16,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU

# Run progress: 50,00% complete, ETA 00:00:37
# Fork: 1 of 1
# Warmup Iteration   1: 7,293 ns/op
# Warmup Iteration   2: 6,638 ns/op
# Warmup Iteration   3: 6,320 ns/op
Iteration   1: 6,335 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6,314 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6,420 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU":
  6,356 ±(99.9%) 1,015 ns/op [Average]
  (min, avg, max) = (6,314, 6,356, 6,420), stdev = 0,056
  CI (99.9%): [5,341, 7,372] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement

# Run progress: 62,50% complete, ETA 00:00:28
# Fork: 1 of 1
# Warmup Iteration   1: 9,682 ns/op
# Warmup Iteration   2: 11,220 ns/op
# Warmup Iteration   3: 8,425 ns/op
Iteration   1: 8,576 ns/op
                 ·gc.alloc.rate:                   1780,620 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          2048,106 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     27,605 B/op
                 ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        4,000 counts
                 ·gc.time:                         2,000 ms

Iteration   2: 8,469 ns/op
                 ·gc.alloc.rate:                   1795,721 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          1721,241 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,005 B/op
                 ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        4,000 counts
                 ·gc.time:                         2,000 ms

Iteration   3: 8,441 ns/op
                 ·gc.alloc.rate:                   1802,315 MB/sec
                 ·gc.alloc.rate.norm:              24,000 B/op
                 ·gc.churn.PS_Eden_Space:          1782,929 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     23,742 B/op
                 ·gc.churn.PS_Survivor_Space:      0,041 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
                 ·gc.count:                        5,000 counts
                 ·gc.time:                         2,000 ms



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement":
  8,496 ±(99.9%) 1,301 ns/op [Average]
  (min, avg, max) = (8,441, 8,496, 8,576), stdev = 0,071
  CI (99.9%): [7,195, 9,796] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate":
  1792,886 ±(99.9%) 202,908 MB/sec [Average]
  (min, avg, max) = (1780,620, 1792,886, 1802,315), stdev = 11,122
  CI (99.9%): [1589,978, 1995,793] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate.norm":
  24,000 ±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (24,000, 24,000, 24,000), stdev = 0,001
  CI (99.9%): [24,000, 24,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space":
  1850,759 ±(99.9%) 3168,367 MB/sec [Average]
  (min, avg, max) = (1721,241, 1850,759, 2048,106), stdev = 173,669
  CI (99.9%): [≈ 0, 5019,126] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space.norm":
  24,784 ±(99.9%) 45,081 B/op [Average]
  (min, avg, max) = (23,005, 24,784, 27,605), stdev = 2,471
  CI (99.9%): [≈ 0, 69,865] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space":
  0,069 ±(99.9%) 0,578 MB/sec [Average]
  (min, avg, max) = (0,041, 0,069, 0,104), stdev = 0,032
  CI (99.9%): [≈ 0, 0,647] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space.norm":
  0,001 ±(99.9%) 0,008 B/op [Average]
  (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
  CI (99.9%): [≈ 0, 0,009] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.count":
  13,000 ±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (4,000, 4,333, 5,000), stdev = 0,577
  CI (99.9%): [13,000, 13,000] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.time":
  6,000 ±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
  CI (99.9%): [6,000, 6,000] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU

# Run progress: 75,00% complete, ETA 00:00:18
# Fork: 1 of 1
# Warmup Iteration   1: 3,600 ns/op
# Warmup Iteration   2: 3,742 ns/op
# Warmup Iteration   3: 3,621 ns/op
Iteration   1: 3,619 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3,621 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3,626 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU":
  3,622 ±(99.9%) 0,061 ns/op [Average]
  (min, avg, max) = (3,619, 3,622, 3,626), stdev = 0,003
  CI (99.9%): [3,560, 3,683] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:-DoEscapeAnalysis -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement

# Run progress: 87,50% complete, ETA 00:00:09
# Fork: 1 of 1
# Warmup Iteration   1: 2,684 ns/op
# Warmup Iteration   2: 2,541 ns/op
# Warmup Iteration   3: 2,253 ns/op
Iteration   1: 2,268 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2,280 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2,269 ns/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement":
  2,273 ±(99.9%) 0,120 ns/op [Average]
  (min, avg, max) = (2,268, 2,273, 2,280), stdev = 0,007
  CI (99.9%): [2,153, 2,393] (assumes normal distribution)

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 00:01:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt     Score      Error   Units
MethodCallBenchmark.directCallConsumeCPU                                                  avgt    3     3,159 ±    0,126   ns/op
MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate                                   avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.directCallConsumeCPU:·gc.alloc.rate.norm                              avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.directCallConsumeCPU:·gc.count                                        avgt    3       ≈ 0             counts
MethodCallBenchmark.directCallIncrement                                                   avgt    3     1,883 ±    0,747   ns/op
MethodCallBenchmark.directCallIncrement:·gc.alloc.rate                                    avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.directCallIncrement:·gc.alloc.rate.norm                               avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.directCallIncrement:·gc.count                                         avgt    3       ≈ 0             counts
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU                                      avgt    3     4,306 ±    0,175   ns/op
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate                       avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.alloc.rate.norm                  avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU:·gc.count                            avgt    3       ≈ 0             counts
MethodCallBenchmark.dynamicProxyDirectCallIncrement                                       avgt    3     5,160 ±    0,461   ns/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate                        avgt    3  2953,763 ±  251,258  MB/sec
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.alloc.rate.norm                   avgt    3    24,000 ±    0,001    B/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Eden_Space               avgt    3  3017,019 ± 2804,134  MB/sec
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Eden_Space.norm          avgt    3    24,511 ±   20,972    B/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Survivor_Space           avgt    3     0,152 ±    1,531  MB/sec
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.churn.PS_Survivor_Space.norm      avgt    3     0,001 ±    0,012    B/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.count                             avgt    3    36,000             counts
MethodCallBenchmark.dynamicProxyDirectCallIncrement:·gc.time                              avgt    3    16,000                 ms
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU                                  avgt    3     6,356 ±    1,015   ns/op
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate                   avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.alloc.rate.norm              avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU:·gc.count                        avgt    3       ≈ 0             counts
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement                                   avgt    3     8,496 ±    1,301   ns/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate                    avgt    3  1792,886 ±  202,908  MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.alloc.rate.norm               avgt    3    24,000 ±    0,001    B/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space           avgt    3  1850,759 ± 3168,367  MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Eden_Space.norm      avgt    3    24,784 ±   45,081    B/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space       avgt    3     0,069 ±    0,578  MB/sec
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.churn.PS_Survivor_Space.norm  avgt    3     0,001 ±    0,008    B/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.count                         avgt    3    13,000             counts
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement:·gc.time                          avgt    3     6,000                 ms
MethodCallBenchmark.staticProxyConsumeCPU                                                 avgt    3     3,622 ±    0,061   ns/op
MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate                                  avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.staticProxyConsumeCPU:·gc.alloc.rate.norm                             avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.staticProxyConsumeCPU:·gc.count                                       avgt    3       ≈ 0             counts
MethodCallBenchmark.staticProxyIncrement                                                  avgt    3     2,273 ±    0,120   ns/op
MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate                                   avgt    3    ≈ 10⁻⁴             MB/sec
MethodCallBenchmark.staticProxyIncrement:·gc.alloc.rate.norm                              avgt    3    ≈ 10⁻⁶               B/op
MethodCallBenchmark.staticProxyIncrement:·gc.count                                        avgt    3       ≈ 0             counts
# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=false
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU

# Run progress: 0,00% complete, ETA 00:18:00
# Fork: 1 of 3
# Warmup Iteration   1: 4,048 ns/op
# Warmup Iteration   2: 3,653 ns/op
# Warmup Iteration   3: 3,112 ns/op
# Warmup Iteration   4: 3,108 ns/op
# Warmup Iteration   5: 3,118 ns/op
Iteration   1: 3,115 ns/op
Iteration   2: 3,119 ns/op
Iteration   3: 3,129 ns/op
Iteration   4: 3,112 ns/op
Iteration   5: 3,109 ns/op
Iteration   6: 3,138 ns/op
Iteration   7: 3,134 ns/op
Iteration   8: 3,104 ns/op
Iteration   9: 3,118 ns/op
Iteration  10: 3,110 ns/op

# Run progress: 4,17% complete, ETA 00:17:22
# Fork: 2 of 3
# Warmup Iteration   1: 4,002 ns/op
# Warmup Iteration   2: 3,771 ns/op
# Warmup Iteration   3: 3,108 ns/op
# Warmup Iteration   4: 3,137 ns/op
# Warmup Iteration   5: 3,158 ns/op
Iteration   1: 3,154 ns/op
Iteration   2: 3,138 ns/op
Iteration   3: 3,115 ns/op
Iteration   4: 3,151 ns/op
Iteration   5: 3,122 ns/op
Iteration   6: 3,117 ns/op
Iteration   7: 3,136 ns/op
Iteration   8: 3,129 ns/op
Iteration   9: 3,100 ns/op
Iteration  10: 3,136 ns/op

# Run progress: 8,33% complete, ETA 00:16:37
# Fork: 3 of 3
# Warmup Iteration   1: 4,006 ns/op
# Warmup Iteration   2: 3,888 ns/op
# Warmup Iteration   3: 3,116 ns/op
# Warmup Iteration   4: 3,130 ns/op
# Warmup Iteration   5: 3,134 ns/op
Iteration   1: 3,131 ns/op
Iteration   2: 3,173 ns/op
Iteration   3: 3,104 ns/op
Iteration   4: 3,175 ns/op
Iteration   5: 3,131 ns/op
Iteration   6: 3,114 ns/op
Iteration   7: 3,259 ns/op
Iteration   8: 3,175 ns/op
Iteration   9: 3,166 ns/op
Iteration  10: 3,178 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU":
  3,136 ±(99.9%) 0,022 ns/op [Average]
  (min, avg, max) = (3,100, 3,136, 3,259), stdev = 0,033
  CI (99.9%): [3,115, 3,158] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=false
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement

# Run progress: 12,50% complete, ETA 00:15:53
# Fork: 1 of 3
# Warmup Iteration   1: 2,428 ns/op
# Warmup Iteration   2: 2,448 ns/op
# Warmup Iteration   3: 1,937 ns/op
# Warmup Iteration   4: 1,901 ns/op
# Warmup Iteration   5: 1,917 ns/op
Iteration   1: 1,883 ns/op
Iteration   2: 1,989 ns/op
Iteration   3: 1,864 ns/op
Iteration   4: 1,854 ns/op
Iteration   5: 1,953 ns/op
Iteration   6: 1,840 ns/op
Iteration   7: 1,930 ns/op
Iteration   8: 1,895 ns/op
Iteration   9: 1,925 ns/op
Iteration  10: 1,910 ns/op

# Run progress: 16,67% complete, ETA 00:15:08
# Fork: 2 of 3
# Warmup Iteration   1: 2,425 ns/op
# Warmup Iteration   2: 2,415 ns/op
# Warmup Iteration   3: 1,890 ns/op
# Warmup Iteration   4: 1,885 ns/op
# Warmup Iteration   5: 1,904 ns/op
Iteration   1: 1,924 ns/op
Iteration   2: 1,896 ns/op
Iteration   3: 1,923 ns/op
Iteration   4: 1,922 ns/op
Iteration   5: 1,859 ns/op
Iteration   6: 1,882 ns/op
Iteration   7: 1,902 ns/op
Iteration   8: 1,854 ns/op
Iteration   9: 1,900 ns/op
Iteration  10: 1,884 ns/op

# Run progress: 20,83% complete, ETA 00:14:22
# Fork: 3 of 3
# Warmup Iteration   1: 2,379 ns/op
# Warmup Iteration   2: 2,388 ns/op
# Warmup Iteration   3: 1,889 ns/op
# Warmup Iteration   4: 1,921 ns/op
# Warmup Iteration   5: 1,897 ns/op
Iteration   1: 1,851 ns/op
Iteration   2: 1,927 ns/op
Iteration   3: 1,937 ns/op
Iteration   4: 2,145 ns/op
Iteration   5: 1,873 ns/op
Iteration   6: 1,916 ns/op
Iteration   7: 1,898 ns/op
Iteration   8: 1,888 ns/op
Iteration   9: 1,889 ns/op
Iteration  10: 1,942 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement":
  1,909 ±(99.9%) 0,037 ns/op [Average]
  (min, avg, max) = (1,840, 1,909, 2,145), stdev = 0,056
  CI (99.9%): [1,871, 1,946] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=false
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU

# Run progress: 25,00% complete, ETA 00:13:37
# Fork: 1 of 3
# Warmup Iteration   1: 5,574 ns/op
# Warmup Iteration   2: 5,545 ns/op
# Warmup Iteration   3: 4,397 ns/op
# Warmup Iteration   4: 4,399 ns/op
# Warmup Iteration   5: 4,385 ns/op
Iteration   1: 4,299 ns/op
Iteration   2: 4,391 ns/op
Iteration   3: 4,391 ns/op
Iteration   4: 4,314 ns/op
Iteration   5: 4,414 ns/op
Iteration   6: 4,346 ns/op
Iteration   7: 4,315 ns/op
Iteration   8: 4,321 ns/op
Iteration   9: 4,313 ns/op
Iteration  10: 4,333 ns/op

# Run progress: 29,17% complete, ETA 00:12:51
# Fork: 2 of 3
# Warmup Iteration   1: 5,685 ns/op
# Warmup Iteration   2: 5,531 ns/op
# Warmup Iteration   3: 4,366 ns/op
# Warmup Iteration   4: 4,325 ns/op
# Warmup Iteration   5: 4,456 ns/op
Iteration   1: 4,359 ns/op
Iteration   2: 4,283 ns/op
Iteration   3: 4,315 ns/op
Iteration   4: 4,423 ns/op
Iteration   5: 4,282 ns/op
Iteration   6: 4,241 ns/op
Iteration   7: 4,321 ns/op
Iteration   8: 4,296 ns/op
Iteration   9: 4,343 ns/op
Iteration  10: 4,413 ns/op

# Run progress: 33,33% complete, ETA 00:12:06
# Fork: 3 of 3
# Warmup Iteration   1: 5,678 ns/op
# Warmup Iteration   2: 5,688 ns/op
# Warmup Iteration   3: 4,266 ns/op
# Warmup Iteration   4: 4,338 ns/op
# Warmup Iteration   5: 4,379 ns/op
Iteration   1: 4,329 ns/op
Iteration   2: 4,350 ns/op
Iteration   3: 4,300 ns/op
Iteration   4: 4,346 ns/op
Iteration   5: 4,348 ns/op
Iteration   6: 4,443 ns/op
Iteration   7: 4,390 ns/op
Iteration   8: 4,422 ns/op
Iteration   9: 4,257 ns/op
Iteration  10: 4,387 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU":
  4,343 ±(99.9%) 0,034 ns/op [Average]
  (min, avg, max) = (4,241, 4,343, 4,443), stdev = 0,052
  CI (99.9%): [4,308, 4,377] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=false
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement

# Run progress: 37,50% complete, ETA 00:11:21
# Fork: 1 of 3
# Warmup Iteration   1: 6,269 ns/op
# Warmup Iteration   2: 5,967 ns/op
# Warmup Iteration   3: 5,156 ns/op
# Warmup Iteration   4: 5,197 ns/op
# Warmup Iteration   5: 5,162 ns/op
Iteration   1: 5,228 ns/op
Iteration   2: 5,096 ns/op
Iteration   3: 5,138 ns/op
Iteration   4: 5,181 ns/op
Iteration   5: 5,168 ns/op
Iteration   6: 5,174 ns/op
Iteration   7: 5,148 ns/op
Iteration   8: 5,105 ns/op
Iteration   9: 5,192 ns/op
Iteration  10: 5,177 ns/op

# Run progress: 41,67% complete, ETA 00:10:35
# Fork: 2 of 3
# Warmup Iteration   1: 6,103 ns/op
# Warmup Iteration   2: 5,851 ns/op
# Warmup Iteration   3: 5,181 ns/op
# Warmup Iteration   4: 5,198 ns/op
# Warmup Iteration   5: 5,146 ns/op
Iteration   1: 5,199 ns/op
Iteration   2: 5,092 ns/op
Iteration   3: 5,178 ns/op
Iteration   4: 5,210 ns/op
Iteration   5: 5,200 ns/op
Iteration   6: 5,185 ns/op
Iteration   7: 5,114 ns/op
Iteration   8: 5,151 ns/op
Iteration   9: 5,157 ns/op
Iteration  10: 5,157 ns/op

# Run progress: 45,83% complete, ETA 00:09:50
# Fork: 3 of 3
# Warmup Iteration   1: 6,147 ns/op
# Warmup Iteration   2: 5,858 ns/op
# Warmup Iteration   3: 5,091 ns/op
# Warmup Iteration   4: 5,126 ns/op
# Warmup Iteration   5: 5,129 ns/op
Iteration   1: 5,113 ns/op
Iteration   2: 5,098 ns/op
Iteration   3: 5,097 ns/op
Iteration   4: 5,121 ns/op
Iteration   5: 5,113 ns/op
Iteration   6: 5,155 ns/op
Iteration   7: 5,108 ns/op
Iteration   8: 5,124 ns/op
Iteration   9: 5,162 ns/op
Iteration  10: 5,099 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement":
  5,148 ±(99.9%) 0,026 ns/op [Average]
  (min, avg, max) = (5,092, 5,148, 5,228), stdev = 0,039
  CI (99.9%): [5,122, 5,174] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=false
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU

# Run progress: 50,00% complete, ETA 00:09:05
# Fork: 1 of 3
# Warmup Iteration   1: 5,204 ns/op
# Warmup Iteration   2: 5,206 ns/op
# Warmup Iteration   3: 5,223 ns/op
# Warmup Iteration   4: 5,123 ns/op
# Warmup Iteration   5: 5,115 ns/op
Iteration   1: 5,190 ns/op
Iteration   2: 5,201 ns/op
Iteration   3: 5,153 ns/op
Iteration   4: 5,241 ns/op
Iteration   5: 5,161 ns/op
Iteration   6: 5,171 ns/op
Iteration   7: 5,136 ns/op
Iteration   8: 5,134 ns/op
Iteration   9: 5,219 ns/op
Iteration  10: 5,177 ns/op

# Run progress: 54,17% complete, ETA 00:08:19
# Fork: 2 of 3
# Warmup Iteration   1: 5,192 ns/op
# Warmup Iteration   2: 5,178 ns/op
# Warmup Iteration   3: 5,140 ns/op
# Warmup Iteration   4: 5,262 ns/op
# Warmup Iteration   5: 5,162 ns/op
Iteration   1: 5,135 ns/op
Iteration   2: 5,152 ns/op
Iteration   3: 5,121 ns/op
Iteration   4: 5,142 ns/op
Iteration   5: 5,156 ns/op
Iteration   6: 5,176 ns/op
Iteration   7: 5,376 ns/op
Iteration   8: 5,208 ns/op
Iteration   9: 5,272 ns/op
Iteration  10: 5,397 ns/op

# Run progress: 58,33% complete, ETA 00:07:34
# Fork: 3 of 3
# Warmup Iteration   1: 5,144 ns/op
# Warmup Iteration   2: 5,392 ns/op
# Warmup Iteration   3: 5,128 ns/op
# Warmup Iteration   4: 5,335 ns/op
# Warmup Iteration   5: 5,139 ns/op
Iteration   1: 5,205 ns/op
Iteration   2: 5,235 ns/op
Iteration   3: 5,329 ns/op
Iteration   4: 5,142 ns/op
Iteration   5: 5,263 ns/op
Iteration   6: 5,239 ns/op
Iteration   7: 5,194 ns/op
Iteration   8: 5,171 ns/op
Iteration   9: 5,195 ns/op
Iteration  10: 5,238 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU":
  5,204 ±(99.9%) 0,046 ns/op [Average]
  (min, avg, max) = (5,121, 5,204, 5,397), stdev = 0,069
  CI (99.9%): [5,158, 5,250] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=false
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement

# Run progress: 62,50% complete, ETA 00:06:48
# Fork: 1 of 3
# Warmup Iteration   1: 8,463 ns/op
# Warmup Iteration   2: 7,908 ns/op
# Warmup Iteration   3: 7,618 ns/op
# Warmup Iteration   4: 7,456 ns/op
# Warmup Iteration   5: 7,403 ns/op
Iteration   1: 7,414 ns/op
Iteration   2: 7,421 ns/op
Iteration   3: 7,417 ns/op
Iteration   4: 7,435 ns/op
Iteration   5: 7,467 ns/op
Iteration   6: 7,409 ns/op
Iteration   7: 7,405 ns/op
Iteration   8: 7,460 ns/op
Iteration   9: 7,439 ns/op
Iteration  10: 7,430 ns/op

# Run progress: 66,67% complete, ETA 00:06:03
# Fork: 2 of 3
# Warmup Iteration   1: 8,139 ns/op
# Warmup Iteration   2: 7,791 ns/op
# Warmup Iteration   3: 7,401 ns/op
# Warmup Iteration   4: 7,417 ns/op
# Warmup Iteration   5: 7,440 ns/op
Iteration   1: 7,409 ns/op
Iteration   2: 7,391 ns/op
Iteration   3: 7,440 ns/op
Iteration   4: 7,450 ns/op
Iteration   5: 7,432 ns/op
Iteration   6: 7,445 ns/op
Iteration   7: 7,410 ns/op
Iteration   8: 7,448 ns/op
Iteration   9: 7,405 ns/op
Iteration  10: 7,458 ns/op

# Run progress: 70,83% complete, ETA 00:05:17
# Fork: 3 of 3
# Warmup Iteration   1: 8,273 ns/op
# Warmup Iteration   2: 7,820 ns/op
# Warmup Iteration   3: 7,448 ns/op
# Warmup Iteration   4: 7,416 ns/op
# Warmup Iteration   5: 7,486 ns/op
Iteration   1: 7,453 ns/op
Iteration   2: 7,408 ns/op
Iteration   3: 7,433 ns/op
Iteration   4: 7,441 ns/op
Iteration   5: 7,439 ns/op
Iteration   6: 7,416 ns/op
Iteration   7: 7,424 ns/op
Iteration   8: 7,453 ns/op
Iteration   9: 7,424 ns/op
Iteration  10: 7,409 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement":
  7,430 ±(99.9%) 0,013 ns/op [Average]
  (min, avg, max) = (7,391, 7,430, 7,467), stdev = 0,020
  CI (99.9%): [7,416, 7,443] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=false
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU

# Run progress: 75,00% complete, ETA 00:04:32
# Fork: 1 of 3
# Warmup Iteration   1: 3,606 ns/op
# Warmup Iteration   2: 3,841 ns/op
# Warmup Iteration   3: 3,529 ns/op
# Warmup Iteration   4: 3,518 ns/op
# Warmup Iteration   5: 3,541 ns/op
Iteration   1: 3,531 ns/op
Iteration   2: 3,564 ns/op
Iteration   3: 3,578 ns/op
Iteration   4: 3,552 ns/op
Iteration   5: 3,524 ns/op
Iteration   6: 3,520 ns/op
Iteration   7: 3,501 ns/op
Iteration   8: 3,507 ns/op
Iteration   9: 3,503 ns/op
Iteration  10: 3,528 ns/op

# Run progress: 79,17% complete, ETA 00:03:47
# Fork: 2 of 3
# Warmup Iteration   1: 3,590 ns/op
# Warmup Iteration   2: 3,822 ns/op
# Warmup Iteration   3: 3,544 ns/op
# Warmup Iteration   4: 3,530 ns/op
# Warmup Iteration   5: 3,499 ns/op
Iteration   1: 3,508 ns/op
Iteration   2: 3,502 ns/op
Iteration   3: 3,518 ns/op
Iteration   4: 3,501 ns/op
Iteration   5: 3,537 ns/op
Iteration   6: 3,549 ns/op
Iteration   7: 3,631 ns/op
Iteration   8: 3,559 ns/op
Iteration   9: 3,658 ns/op
Iteration  10: 3,574 ns/op

# Run progress: 83,33% complete, ETA 00:03:01
# Fork: 3 of 3
# Warmup Iteration   1: 3,590 ns/op
# Warmup Iteration   2: 3,919 ns/op
# Warmup Iteration   3: 3,623 ns/op
# Warmup Iteration   4: 3,640 ns/op
# Warmup Iteration   5: 3,771 ns/op
Iteration   1: 3,588 ns/op
Iteration   2: 3,650 ns/op
Iteration   3: 3,763 ns/op
Iteration   4: 3,657 ns/op
Iteration   5: 3,829 ns/op
Iteration   6: 3,647 ns/op
Iteration   7: 3,611 ns/op
Iteration   8: 3,700 ns/op
Iteration   9: 3,658 ns/op
Iteration  10: 3,642 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU":
  3,586 ±(99.9%) 0,055 ns/op [Average]
  (min, avg, max) = (3,501, 3,586, 3,829), stdev = 0,083
  CI (99.9%): [3,531, 3,642] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=false
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement

# Run progress: 87,50% complete, ETA 00:02:16
# Fork: 1 of 3
# Warmup Iteration   1: 2,599 ns/op
# Warmup Iteration   2: 2,525 ns/op
# Warmup Iteration   3: 2,253 ns/op
# Warmup Iteration   4: 2,304 ns/op
# Warmup Iteration   5: 2,350 ns/op
Iteration   1: 2,262 ns/op
Iteration   2: 2,274 ns/op
Iteration   3: 2,248 ns/op
Iteration   4: 2,314 ns/op
Iteration   5: 2,223 ns/op
Iteration   6: 2,223 ns/op
Iteration   7: 2,228 ns/op
Iteration   8: 2,285 ns/op
Iteration   9: 2,245 ns/op
Iteration  10: 2,327 ns/op

# Run progress: 91,67% complete, ETA 00:01:30
# Fork: 2 of 3
# Warmup Iteration   1: 2,736 ns/op
# Warmup Iteration   2: 2,609 ns/op
# Warmup Iteration   3: 2,266 ns/op
# Warmup Iteration   4: 2,239 ns/op
# Warmup Iteration   5: 2,295 ns/op
Iteration   1: 2,337 ns/op
Iteration   2: 2,296 ns/op
Iteration   3: 2,284 ns/op
Iteration   4: 2,237 ns/op
Iteration   5: 2,271 ns/op
Iteration   6: 2,274 ns/op
Iteration   7: 2,308 ns/op
Iteration   8: 2,299 ns/op
Iteration   9: 2,230 ns/op
Iteration  10: 2,258 ns/op

# Run progress: 95,83% complete, ETA 00:00:45
# Fork: 3 of 3
# Warmup Iteration   1: 2,540 ns/op
# Warmup Iteration   2: 2,536 ns/op
# Warmup Iteration   3: 2,239 ns/op
# Warmup Iteration   4: 2,258 ns/op
# Warmup Iteration   5: 2,298 ns/op
Iteration   1: 2,252 ns/op
Iteration   2: 2,303 ns/op
Iteration   3: 2,312 ns/op
Iteration   4: 2,241 ns/op
Iteration   5: 2,297 ns/op
Iteration   6: 2,233 ns/op
Iteration   7: 2,321 ns/op
Iteration   8: 2,215 ns/op
Iteration   9: 2,276 ns/op
Iteration  10: 2,271 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement":
  2,271 ±(99.9%) 0,023 ns/op [Average]
  (min, avg, max) = (2,215, 2,271, 2,337), stdev = 0,035
  CI (99.9%): [2,248, 2,295] (assumes normal distribution)


# Run complete. Total time: 00:18:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt  Score   Error  Units
MethodCallBenchmark.directCallConsumeCPU                  avgt   30  3,136 ± 0,022  ns/op
MethodCallBenchmark.directCallIncrement                   avgt   30  1,909 ± 0,037  ns/op
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU      avgt   30  4,343 ± 0,034  ns/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement       avgt   30  5,148 ± 0,026  ns/op
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU  avgt   30  5,204 ± 0,046  ns/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement   avgt   30  7,430 ± 0,013  ns/op
MethodCallBenchmark.staticProxyConsumeCPU                 avgt   30  3,586 ± 0,055  ns/op
MethodCallBenchmark.staticProxyIncrement                  avgt   30  2,271 ± 0,023  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU

# Run progress: 0,00% complete, ETA 00:18:00
# Fork: 1 of 3
# Warmup Iteration   1: 4,076 ns/op
# Warmup Iteration   2: 3,720 ns/op
# Warmup Iteration   3: 3,184 ns/op
# Warmup Iteration   4: 3,190 ns/op
# Warmup Iteration   5: 3,178 ns/op
Iteration   1: 3,174 ns/op
Iteration   2: 3,121 ns/op
Iteration   3: 3,199 ns/op
Iteration   4: 3,164 ns/op
Iteration   5: 3,166 ns/op
Iteration   6: 3,217 ns/op
Iteration   7: 3,184 ns/op
Iteration   8: 3,095 ns/op
Iteration   9: 3,152 ns/op
Iteration  10: 3,140 ns/op

# Run progress: 4,17% complete, ETA 00:17:23
# Fork: 2 of 3
# Warmup Iteration   1: 4,081 ns/op
# Warmup Iteration   2: 3,760 ns/op
# Warmup Iteration   3: 3,116 ns/op
# Warmup Iteration   4: 3,182 ns/op
# Warmup Iteration   5: 3,148 ns/op
Iteration   1: 3,181 ns/op
Iteration   2: 3,168 ns/op
Iteration   3: 3,205 ns/op
Iteration   4: 3,181 ns/op
Iteration   5: 3,133 ns/op
Iteration   6: 3,286 ns/op
Iteration   7: 3,114 ns/op
Iteration   8: 3,173 ns/op
Iteration   9: 3,146 ns/op
Iteration  10: 3,168 ns/op

# Run progress: 8,33% complete, ETA 00:16:38
# Fork: 3 of 3
# Warmup Iteration   1: 3,972 ns/op
# Warmup Iteration   2: 3,855 ns/op
# Warmup Iteration   3: 3,184 ns/op
# Warmup Iteration   4: 3,220 ns/op
# Warmup Iteration   5: 3,235 ns/op
Iteration   1: 3,209 ns/op
Iteration   2: 3,154 ns/op
Iteration   3: 3,200 ns/op
Iteration   4: 3,142 ns/op
Iteration   5: 3,139 ns/op
Iteration   6: 3,154 ns/op
Iteration   7: 3,301 ns/op
Iteration   8: 3,094 ns/op
Iteration   9: 3,094 ns/op
Iteration  10: 3,182 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallConsumeCPU":
  3,168 ±(99.9%) 0,032 ns/op [Average]
  (min, avg, max) = (3,094, 3,168, 3,301), stdev = 0,048
  CI (99.9%): [3,136, 3,200] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement

# Run progress: 12,50% complete, ETA 00:15:53
# Fork: 1 of 3
# Warmup Iteration   1: 2,463 ns/op
# Warmup Iteration   2: 2,382 ns/op
# Warmup Iteration   3: 1,921 ns/op
# Warmup Iteration   4: 1,886 ns/op
# Warmup Iteration   5: 1,921 ns/op
Iteration   1: 1,876 ns/op
Iteration   2: 1,887 ns/op
Iteration   3: 1,885 ns/op
Iteration   4: 1,896 ns/op
Iteration   5: 1,885 ns/op
Iteration   6: 1,886 ns/op
Iteration   7: 1,897 ns/op
Iteration   8: 1,893 ns/op
Iteration   9: 1,974 ns/op
Iteration  10: 1,885 ns/op

# Run progress: 16,67% complete, ETA 00:15:08
# Fork: 2 of 3
# Warmup Iteration   1: 2,557 ns/op
# Warmup Iteration   2: 2,463 ns/op
# Warmup Iteration   3: 1,890 ns/op
# Warmup Iteration   4: 1,925 ns/op
# Warmup Iteration   5: 1,935 ns/op
Iteration   1: 1,965 ns/op
Iteration   2: 1,910 ns/op
Iteration   3: 1,938 ns/op
Iteration   4: 1,893 ns/op
Iteration   5: 1,966 ns/op
Iteration   6: 1,908 ns/op
Iteration   7: 1,955 ns/op
Iteration   8: 1,868 ns/op
Iteration   9: 1,911 ns/op
Iteration  10: 1,913 ns/op

# Run progress: 20,83% complete, ETA 00:14:22
# Fork: 3 of 3
# Warmup Iteration   1: 2,451 ns/op
# Warmup Iteration   2: 2,416 ns/op
# Warmup Iteration   3: 1,924 ns/op
# Warmup Iteration   4: 1,914 ns/op
# Warmup Iteration   5: 1,888 ns/op
Iteration   1: 1,869 ns/op
Iteration   2: 1,927 ns/op
Iteration   3: 1,939 ns/op
Iteration   4: 1,861 ns/op
Iteration   5: 1,897 ns/op
Iteration   6: 1,880 ns/op
Iteration   7: 1,949 ns/op
Iteration   8: 1,870 ns/op
Iteration   9: 1,905 ns/op
Iteration  10: 1,969 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.directCallIncrement":
  1,909 ±(99.9%) 0,022 ns/op [Average]
  (min, avg, max) = (1,861, 1,909, 1,974), stdev = 0,034
  CI (99.9%): [1,886, 1,931] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU

# Run progress: 25,00% complete, ETA 00:13:37
# Fork: 1 of 3
# Warmup Iteration   1: 5,669 ns/op
# Warmup Iteration   2: 5,567 ns/op
# Warmup Iteration   3: 4,618 ns/op
# Warmup Iteration   4: 4,612 ns/op
# Warmup Iteration   5: 4,846 ns/op
Iteration   1: 4,718 ns/op
Iteration   2: 4,737 ns/op
Iteration   3: 4,639 ns/op
Iteration   4: 4,763 ns/op
Iteration   5: 4,668 ns/op
Iteration   6: 4,699 ns/op
Iteration   7: 4,652 ns/op
Iteration   8: 4,701 ns/op
Iteration   9: 4,605 ns/op
Iteration  10: 4,744 ns/op

# Run progress: 29,17% complete, ETA 00:12:52
# Fork: 2 of 3
# Warmup Iteration   1: 5,538 ns/op
# Warmup Iteration   2: 5,615 ns/op
# Warmup Iteration   3: 4,548 ns/op
# Warmup Iteration   4: 4,677 ns/op
# Warmup Iteration   5: 4,725 ns/op
Iteration   1: 4,563 ns/op
Iteration   2: 4,756 ns/op
Iteration   3: 4,626 ns/op
Iteration   4: 4,598 ns/op
Iteration   5: 4,588 ns/op
Iteration   6: 4,735 ns/op
Iteration   7: 4,587 ns/op
Iteration   8: 4,785 ns/op
Iteration   9: 4,641 ns/op
Iteration  10: 4,724 ns/op

# Run progress: 33,33% complete, ETA 00:12:06
# Fork: 3 of 3
# Warmup Iteration   1: 5,479 ns/op
# Warmup Iteration   2: 5,517 ns/op
# Warmup Iteration   3: 4,288 ns/op
# Warmup Iteration   4: 4,615 ns/op
# Warmup Iteration   5: 4,379 ns/op
Iteration   1: 4,399 ns/op
Iteration   2: 4,475 ns/op
Iteration   3: 4,446 ns/op
Iteration   4: 4,506 ns/op
Iteration   5: 4,327 ns/op
Iteration   6: 4,319 ns/op
Iteration   7: 4,388 ns/op
Iteration   8: 4,526 ns/op
Iteration   9: 4,468 ns/op
Iteration  10: 4,298 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU":
  4,589 ±(99.9%) 0,096 ns/op [Average]
  (min, avg, max) = (4,298, 4,589, 4,785), stdev = 0,144
  CI (99.9%): [4,493, 4,686] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement

# Run progress: 37,50% complete, ETA 00:11:21
# Fork: 1 of 3
# Warmup Iteration   1: 6,250 ns/op
# Warmup Iteration   2: 6,870 ns/op
# Warmup Iteration   3: 5,191 ns/op
# Warmup Iteration   4: 5,164 ns/op
# Warmup Iteration   5: 5,149 ns/op
Iteration   1: 5,153 ns/op
Iteration   2: 5,162 ns/op
Iteration   3: 5,179 ns/op
Iteration   4: 5,146 ns/op
Iteration   5: 5,152 ns/op
Iteration   6: 5,174 ns/op
Iteration   7: 5,156 ns/op
Iteration   8: 5,169 ns/op
Iteration   9: 5,166 ns/op
Iteration  10: 5,154 ns/op

# Run progress: 41,67% complete, ETA 00:10:35
# Fork: 2 of 3
# Warmup Iteration   1: 6,059 ns/op
# Warmup Iteration   2: 5,848 ns/op
# Warmup Iteration   3: 5,110 ns/op
# Warmup Iteration   4: 5,086 ns/op
# Warmup Iteration   5: 5,111 ns/op
Iteration   1: 5,129 ns/op
Iteration   2: 5,110 ns/op
Iteration   3: 5,083 ns/op
Iteration   4: 5,116 ns/op
Iteration   5: 5,100 ns/op
Iteration   6: 5,096 ns/op
Iteration   7: 5,091 ns/op
Iteration   8: 5,107 ns/op
Iteration   9: 5,097 ns/op
Iteration  10: 5,122 ns/op

# Run progress: 45,83% complete, ETA 00:09:50
# Fork: 3 of 3
# Warmup Iteration   1: 6,174 ns/op
# Warmup Iteration   2: 5,838 ns/op
# Warmup Iteration   3: 5,087 ns/op
# Warmup Iteration   4: 5,085 ns/op
# Warmup Iteration   5: 5,090 ns/op
Iteration   1: 5,138 ns/op
Iteration   2: 5,090 ns/op
Iteration   3: 5,092 ns/op
Iteration   4: 5,091 ns/op
Iteration   5: 5,123 ns/op
Iteration   6: 5,134 ns/op
Iteration   7: 5,144 ns/op
Iteration   8: 5,099 ns/op
Iteration   9: 5,102 ns/op
Iteration  10: 5,079 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyDirectCallIncrement":
  5,125 ±(99.9%) 0,020 ns/op [Average]
  (min, avg, max) = (5,079, 5,125, 5,179), stdev = 0,031
  CI (99.9%): [5,105, 5,146] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU

# Run progress: 50,00% complete, ETA 00:09:05
# Fork: 1 of 3
# Warmup Iteration   1: 7,270 ns/op
# Warmup Iteration   2: 6,678 ns/op
# Warmup Iteration   3: 6,461 ns/op
# Warmup Iteration   4: 6,532 ns/op
# Warmup Iteration   5: 6,552 ns/op
Iteration   1: 6,495 ns/op
Iteration   2: 6,412 ns/op
Iteration   3: 6,527 ns/op
Iteration   4: 6,494 ns/op
Iteration   5: 6,498 ns/op
Iteration   6: 6,433 ns/op
Iteration   7: 6,569 ns/op
Iteration   8: 6,509 ns/op
Iteration   9: 6,541 ns/op
Iteration  10: 6,586 ns/op

# Run progress: 54,17% complete, ETA 00:08:19
# Fork: 2 of 3
# Warmup Iteration   1: 7,288 ns/op
# Warmup Iteration   2: 6,639 ns/op
# Warmup Iteration   3: 6,522 ns/op
# Warmup Iteration   4: 6,630 ns/op
# Warmup Iteration   5: 6,490 ns/op
Iteration   1: 6,460 ns/op
Iteration   2: 6,608 ns/op
Iteration   3: 6,439 ns/op
Iteration   4: 6,477 ns/op
Iteration   5: 6,625 ns/op
Iteration   6: 6,544 ns/op
Iteration   7: 6,834 ns/op
Iteration   8: 6,619 ns/op
Iteration   9: 6,729 ns/op
Iteration  10: 6,659 ns/op

# Run progress: 58,33% complete, ETA 00:07:34
# Fork: 3 of 3
# Warmup Iteration   1: 7,205 ns/op
# Warmup Iteration   2: 6,637 ns/op
# Warmup Iteration   3: 6,638 ns/op
# Warmup Iteration   4: 6,629 ns/op
# Warmup Iteration   5: 6,612 ns/op
Iteration   1: 6,596 ns/op
Iteration   2: 6,610 ns/op
Iteration   3: 6,495 ns/op
Iteration   4: 6,513 ns/op
Iteration   5: 6,595 ns/op
Iteration   6: 6,574 ns/op
Iteration   7: 6,575 ns/op
Iteration   8: 6,585 ns/op
Iteration   9: 6,550 ns/op
Iteration  10: 6,648 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU":
  6,560 ±(99.9%) 0,060 ns/op [Average]
  (min, avg, max) = (6,412, 6,560, 6,834), stdev = 0,089
  CI (99.9%): [6,500, 6,620] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement

# Run progress: 62,50% complete, ETA 00:06:48
# Fork: 1 of 3
# Warmup Iteration   1: 9,311 ns/op
# Warmup Iteration   2: 9,119 ns/op
# Warmup Iteration   3: 8,697 ns/op
# Warmup Iteration   4: 8,574 ns/op
# Warmup Iteration   5: 8,531 ns/op
Iteration   1: 8,594 ns/op
Iteration   2: 8,510 ns/op
Iteration   3: 8,511 ns/op
Iteration   4: 8,574 ns/op
Iteration   5: 8,638 ns/op
Iteration   6: 8,513 ns/op
Iteration   7: 8,568 ns/op
Iteration   8: 8,555 ns/op
Iteration   9: 8,550 ns/op
Iteration  10: 8,545 ns/op

# Run progress: 66,67% complete, ETA 00:06:03
# Fork: 2 of 3
# Warmup Iteration   1: 8,981 ns/op
# Warmup Iteration   2: 8,697 ns/op
# Warmup Iteration   3: 8,530 ns/op
# Warmup Iteration   4: 8,548 ns/op
# Warmup Iteration   5: 8,586 ns/op
Iteration   1: 8,585 ns/op
Iteration   2: 8,548 ns/op
Iteration   3: 8,565 ns/op
Iteration   4: 8,540 ns/op
Iteration   5: 8,579 ns/op
Iteration   6: 8,610 ns/op
Iteration   7: 8,582 ns/op
Iteration   8: 8,535 ns/op
Iteration   9: 8,601 ns/op
Iteration  10: 8,592 ns/op

# Run progress: 70,83% complete, ETA 00:05:18
# Fork: 3 of 3
# Warmup Iteration   1: 9,138 ns/op
# Warmup Iteration   2: 8,713 ns/op
# Warmup Iteration   3: 8,860 ns/op
# Warmup Iteration   4: 8,857 ns/op
# Warmup Iteration   5: 8,862 ns/op
Iteration   1: 8,887 ns/op
Iteration   2: 8,883 ns/op
Iteration   3: 8,852 ns/op
Iteration   4: 8,878 ns/op
Iteration   5: 8,881 ns/op
Iteration   6: 8,901 ns/op
Iteration   7: 8,861 ns/op
Iteration   8: 8,867 ns/op
Iteration   9: 8,863 ns/op
Iteration  10: 8,900 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.dynamicProxyReflectiveCallIncrement":
  8,669 ±(99.9%) 0,102 ns/op [Average]
  (min, avg, max) = (8,510, 8,669, 8,901), stdev = 0,153
  CI (99.9%): [8,567, 8,771] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU

# Run progress: 75,00% complete, ETA 00:04:32
# Fork: 1 of 3
# Warmup Iteration   1: 3,629 ns/op
# Warmup Iteration   2: 3,877 ns/op
# Warmup Iteration   3: 3,574 ns/op
# Warmup Iteration   4: 3,542 ns/op
# Warmup Iteration   5: 3,495 ns/op
Iteration   1: 3,539 ns/op
Iteration   2: 3,530 ns/op
Iteration   3: 3,519 ns/op
Iteration   4: 3,554 ns/op
Iteration   5: 3,529 ns/op
Iteration   6: 3,538 ns/op
Iteration   7: 3,535 ns/op
Iteration   8: 3,539 ns/op
Iteration   9: 3,638 ns/op
Iteration  10: 3,660 ns/op

# Run progress: 79,17% complete, ETA 00:03:47
# Fork: 2 of 3
# Warmup Iteration   1: 3,671 ns/op
# Warmup Iteration   2: 3,959 ns/op
# Warmup Iteration   3: 3,551 ns/op
# Warmup Iteration   4: 3,568 ns/op
# Warmup Iteration   5: 3,645 ns/op
Iteration   1: 3,617 ns/op
Iteration   2: 3,646 ns/op
Iteration   3: 3,538 ns/op
Iteration   4: 3,552 ns/op
Iteration   5: 3,577 ns/op
Iteration   6: 3,548 ns/op
Iteration   7: 3,595 ns/op
Iteration   8: 3,627 ns/op
Iteration   9: 3,558 ns/op
Iteration  10: 3,536 ns/op

# Run progress: 83,33% complete, ETA 00:03:01
# Fork: 3 of 3
# Warmup Iteration   1: 3,616 ns/op
# Warmup Iteration   2: 3,729 ns/op
# Warmup Iteration   3: 3,749 ns/op
# Warmup Iteration   4: 3,693 ns/op
# Warmup Iteration   5: 3,608 ns/op
Iteration   1: 3,684 ns/op
Iteration   2: 3,677 ns/op
Iteration   3: 3,595 ns/op
Iteration   4: 3,722 ns/op
Iteration   5: 3,626 ns/op
Iteration   6: 3,651 ns/op
Iteration   7: 3,678 ns/op
Iteration   8: 3,670 ns/op
Iteration   9: 3,583 ns/op
Iteration  10: 3,644 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyConsumeCPU":
  3,597 ±(99.9%) 0,040 ns/op [Average]
  (min, avg, max) = (3,519, 3,597, 3,722), stdev = 0,059
  CI (99.9%): [3,557, 3,636] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.6, OpenJDK 64-Bit Server VM, 11.0.6+10-LTS
# VM invoker: /Users/heinz/Dropbox (HIC Straws)/heinz/JavaVirtualMachines/zulu-11.jdk/Contents/Home/bin/java
# VM options: -XX:+UseParallelGC -Deu.javaspecialists.books.dynamicproxies.util.MethodTurboBooster.disabled=true
# Warmup: 5 iterations, 3 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement

# Run progress: 87,50% complete, ETA 00:02:16
# Fork: 1 of 3
# Warmup Iteration   1: 2,607 ns/op
# Warmup Iteration   2: 2,534 ns/op
# Warmup Iteration   3: 2,288 ns/op
# Warmup Iteration   4: 2,277 ns/op
# Warmup Iteration   5: 2,284 ns/op
Iteration   1: 2,308 ns/op
Iteration   2: 2,241 ns/op
Iteration   3: 2,326 ns/op
Iteration   4: 2,268 ns/op
Iteration   5: 2,252 ns/op
Iteration   6: 2,307 ns/op
Iteration   7: 2,251 ns/op
Iteration   8: 2,264 ns/op
Iteration   9: 2,356 ns/op
Iteration  10: 2,267 ns/op

# Run progress: 91,67% complete, ETA 00:01:30
# Fork: 2 of 3
# Warmup Iteration   1: 2,576 ns/op
# Warmup Iteration   2: 2,487 ns/op
# Warmup Iteration   3: 2,263 ns/op
# Warmup Iteration   4: 2,251 ns/op
# Warmup Iteration   5: 2,293 ns/op
Iteration   1: 2,246 ns/op
Iteration   2: 2,282 ns/op
Iteration   3: 2,231 ns/op
Iteration   4: 2,280 ns/op
Iteration   5: 2,308 ns/op
Iteration   6: 2,252 ns/op
Iteration   7: 2,322 ns/op
Iteration   8: 2,386 ns/op
Iteration   9: 2,330 ns/op
Iteration  10: 2,245 ns/op

# Run progress: 95,83% complete, ETA 00:00:45
# Fork: 3 of 3
# Warmup Iteration   1: 2,609 ns/op
# Warmup Iteration   2: 2,621 ns/op
# Warmup Iteration   3: 2,300 ns/op
# Warmup Iteration   4: 2,317 ns/op
# Warmup Iteration   5: 2,347 ns/op
Iteration   1: 2,319 ns/op
Iteration   2: 2,228 ns/op
Iteration   3: 2,243 ns/op
Iteration   4: 2,316 ns/op
Iteration   5: 2,259 ns/op
Iteration   6: 2,291 ns/op
Iteration   7: 2,251 ns/op
Iteration   8: 2,244 ns/op
Iteration   9: 2,286 ns/op
Iteration  10: 2,282 ns/op


Result "eu.javaspecialists.books.dynamicproxies.ch03.benchmarks.MethodCallBenchmark.staticProxyIncrement":
  2,281 ±(99.9%) 0,026 ns/op [Average]
  (min, avg, max) = (2,228, 2,281, 2,386), stdev = 0,039
  CI (99.9%): [2,255, 2,308] (assumes normal distribution)


# Run complete. Total time: 00:18:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt  Score   Error  Units
MethodCallBenchmark.directCallConsumeCPU                  avgt   30  3,168 ± 0,032  ns/op
MethodCallBenchmark.directCallIncrement                   avgt   30  1,909 ± 0,022  ns/op
MethodCallBenchmark.dynamicProxyDirectCallConsumeCPU      avgt   30  4,589 ± 0,096  ns/op
MethodCallBenchmark.dynamicProxyDirectCallIncrement       avgt   30  5,125 ± 0,020  ns/op
MethodCallBenchmark.dynamicProxyReflectiveCallConsumeCPU  avgt   30  6,560 ± 0,060  ns/op
MethodCallBenchmark.dynamicProxyReflectiveCallIncrement   avgt   30  8,669 ± 0,102  ns/op
MethodCallBenchmark.staticProxyConsumeCPU                 avgt   30  3,597 ± 0,040  ns/op
MethodCallBenchmark.staticProxyIncrement                  avgt   30  2,281 ± 0,026  ns/op
